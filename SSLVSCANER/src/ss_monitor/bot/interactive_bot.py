"""
Interactive Telegram Bot for SS.lv Monitor with full UI
"""
import asyncio
import logging
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

from ..config import config
from ..database import DatabaseManager
from ..database.user_manager import UserManager
from ..parser import SSParser
from ..notifications import NotificationSystem

logger = logging.getLogger(__name__)

class InteractiveSSMonitorBot:
    """Interactive SS.lv Monitor Telegram Bot with full UI"""
    
    def __init__(self, db_manager: DatabaseManager = None):
        self.db_manager = db_manager or DatabaseManager()
        self.user_manager = UserManager(self.db_manager)
        self.parser = SSParser()
        self.notification_system = NotificationSystem(self.db_manager, self)
        self.application = None
        self.user_sessions = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._setup_application()
    
    def _setup_application(self):
        """Setup the Telegram application"""
        try:
            self.application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
            self._setup_handlers()
            logger.info("Interactive Telegram application setup completed")
        except Exception as e:
            logger.error(f"Error setting up Telegram application: {e}")
            raise
    
    def _setup_handlers(self):
        """Setup command and message handlers"""
        # Command handlers
        self.application.add_handler(CommandHandler("start", self._start_command))
        self.application.add_handler(CommandHandler("help", self._help_command))
        self.application.add_handler(CommandHandler("status", self._status_command))
        
        # Callback query handlers
        self.application.add_handler(CallbackQueryHandler(self._add_section_callback, pattern="^add_section$"))
        self.application.add_handler(CallbackQueryHandler(self._frequency_callback, pattern="^frequency$"))
        self.application.add_handler(CallbackQueryHandler(self._status_callback, pattern="^status$"))
        self.application.add_handler(CallbackQueryHandler(self._manage_sections_callback, pattern="^manage_sections$"))
        self.application.add_handler(CallbackQueryHandler(self._delete_section_callback, pattern="^delete_section_"))
        
        # Message handlers
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_text_message))
        
        logger.info("Added interactive handlers")
    
    def _get_main_keyboard(self) -> ReplyKeyboardMarkup:
        """Get main menu keyboard"""
        keyboard = [
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª", "‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å"],
            ["üìä –°—Ç–∞—Ç—É—Å", "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏"],
            ["üîß –û—Ç–ª–∞–¥–∫–∞"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    def _get_add_section_keyboard(self) -> ReplyKeyboardMarkup:
        """Get keyboard for add section mode"""
        keyboard = [
            ["‚úÖ –ì–æ—Ç–æ–≤–æ"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    def _get_frequency_keyboard(self) -> ReplyKeyboardMarkup:
        """Get frequency selection keyboard"""
        keyboard = [
            ["1 —á–∞—Å", "4 —á–∞—Å–∞"],
            ["12 —á–∞—Å–æ–≤", "1 –¥–µ–Ω—å"],
            ["‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start command handler"""
        try:
            user_id = str(update.effective_user.id)
            username = update.effective_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_sessions[user_id] = {
                'state': 'main_menu',
                'sections': [],
                'frequency': '1h',
                'last_scan': None
            }
            
            # Get user's existing subscriptions
            subscriptions = self.user_manager.get_user_subscriptions(user_id)
            if subscriptions:
                self.user_sessions[user_id]['sections'] = [sub.url for sub in subscriptions]
                self.user_sessions[user_id]['frequency'] = subscriptions[0].frequency
            
            welcome_text = f"""
üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SS.lv Monitor Bot v{config.__version__}!

–ü—Ä–∏–≤–µ—Ç, {username}! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ ss.lv —Å —É–¥–æ–±–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.

üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=self._get_main_keyboard()
            )
            
        except Exception as e:
            logger.error(f"Error in start command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
    
    async def _help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Help command handler"""
        help_text = f"""
üè† SS.lv Monitor Bot v{config.__version__} - –°–ø—Ä–∞–≤–∫–∞

üìã –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª - –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã
‚Ä¢ ‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ üìä –°—Ç–∞—Ç—É—Å - –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
‚Ä¢ ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏

üîß –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–∑–¥–µ–ª ss.lv
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
4. –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã

üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–¥–µ–ª—ã:
‚Ä¢ –ö–≤–∞—Ä—Ç–∏—Ä—ã –≤ –†–∏–≥–µ: https://www.ss.lv/lv/real-estate/flats/riga/
‚Ä¢ –î–æ–º–∞ –≤ –†–∏–≥–µ: https://www.ss.lv/lv/real-estate/homes-summer-residences/riga/
‚Ä¢ –ö–≤–∞—Ä—Ç–∏—Ä—ã –≤ –Æ—Ä–º–∞–ª–µ: https://www.ss.lv/lv/real-estate/flats/jurmala/
‚Ä¢ –ò –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã ss.lv

‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:
‚Ä¢ 1 —á–∞—Å - —á–∞—Å—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ 4 —á–∞—Å–∞ - —É–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ  
‚Ä¢ 12 —á–∞—Å–æ–≤ - —Ä–µ–¥–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ 1 –¥–µ–Ω—å - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

üîß –ê–≤—Ç–æ—Ä: {config.__author__}
üåê –°–∞–π—Ç: {config.__website__}
"""
        await update.message.reply_text(help_text)
    
    async def _add_section_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle add section button"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        self.user_sessions[user_id]['state'] = 'waiting_for_url'
        
        await query.edit_message_text(
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª ss.lv\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:\n"
            "‚Ä¢ https://www.ss.lv/lv/real-estate/flats/riga/\n"
            "‚Ä¢ https://www.ss.lv/lv/real-estate/homes-summer-residences/riga/\n"
            "‚Ä¢ https://www.ss.lv/lv/real-estate/flats/jurmala/\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
            reply_markup=self._get_main_keyboard()
        )
    
    async def _frequency_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle frequency button"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        current_freq = self.user_sessions.get(user_id, {}).get('frequency', '1h')
        
        await query.edit_message_text(
            f"‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏\n\n"
            f"–¢–µ–∫—É—â–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {self._format_frequency(current_freq)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:",
            reply_markup=self._get_frequency_keyboard()
        )
    
    async def _status_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle status button"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        subscriptions = self.user_manager.get_user_subscriptions(user_id)
        user_stats = self.user_manager.get_user_stats(user_id)
        
        # Get database stats
        total_ads = self.db_manager.get_total_ads_count()
        
        status_text = f"""
üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

ü§ñ –ë–æ—Ç: –†–∞–±–æ—Ç–∞–µ—Ç ‚úÖ
üìà –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ: {total_ads}
üë§ –í–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã: {len(subscriptions)}
‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {self._format_frequency(user_stats['frequency'])}

üìã –í–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã:
{chr(10).join([f"‚Ä¢ {sub.url}" for sub in subscriptions]) if subscriptions else "‚Ä¢ –ù–µ—Ç —Ä–∞–∑–¥–µ–ª–æ–≤"}

üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {user_stats['last_updated'].strftime('%Y-%m-%d %H:%M') if user_stats['last_updated'] else '–ù–∏–∫–æ–≥–¥–∞'}

‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!
"""
        
        await query.edit_message_text(
            status_text,
            reply_markup=self._get_main_keyboard()
        )
    
    async def _manage_sections_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle manage sections button"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        subscriptions = self.user_manager.get_user_subscriptions(user_id)
        
        if not subscriptions:
            await query.edit_message_text(
                "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )
            return
        
        keyboard = []
        for subscription in subscriptions:
            display_name = self._format_url_for_display(subscription.url)
            keyboard.append([InlineKeyboardButton(
                f"üóëÔ∏è {display_name}",
                callback_data=f"delete_section_{subscription.id}"
            )])
        
        
        sections_text = "\n".join([f"‚Ä¢ {self._format_url_for_display(sub.url)}" for sub in subscriptions])
        
        await query.edit_message_text(
            f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏\n\n"
            f"–í–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã:\n{sections_text}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    
    async def _delete_section_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle section deletion"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        subscription_id = int(query.data.split('_')[2])
        
        # Get subscription info before deletion
        subscriptions = self.user_manager.get_user_subscriptions(user_id)
        subscription_to_delete = next((sub for sub in subscriptions if sub.id == subscription_id), None)
        
        if not subscription_to_delete:
            await query.edit_message_text(
                "‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω."
            )
            return
        
        # Delete from database
        success = self.user_manager.delete_user_subscription(user_id, subscription_id)
        
        if success:
            display_name = self._format_url_for_display(subscription_to_delete.url)
            
            # Get updated subscriptions list
            updated_subscriptions = self.user_manager.get_user_subscriptions(user_id)
            
            if not updated_subscriptions:
                # No more subscriptions, show main menu
                await query.edit_message_text(
                    f"‚úÖ –†–∞–∑–¥–µ–ª —É–¥–∞–ª–µ–Ω: {display_name}\n\n"
                    f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                    "–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤.",
                    reply_markup=None
                )
                # Send new message with main keyboard
                await query.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
                    reply_markup=self._get_main_keyboard()
                )
            else:
                # Show updated subscriptions list
                sections_text = "\n".join([f"‚Ä¢ {self._format_url_for_display(sub.url)}" for sub in updated_subscriptions])
                
                keyboard = []
                for sub in updated_subscriptions:
                    keyboard.append([InlineKeyboardButton(
                        f"üóëÔ∏è {self._format_url_for_display(sub.url)}",
                        callback_data=f"delete_{sub.id}"
                    )])
                
                await query.edit_message_text(
                    f"‚úÖ –†–∞–∑–¥–µ–ª —É–¥–∞–ª–µ–Ω: {display_name}\n\n"
                    f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏\n\n"
                    f"–í–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã:\n{sections_text}\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    
    async def _handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages"""
        user_id = str(update.effective_user.id)
        text = update.message.text
        
        logger.info(f"Received text message from user {user_id}: {text}")
        
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {'state': 'main_menu', 'sections': [], 'frequency': '1h'}
        
        logger.info(f"User {user_id} state: {self.user_sessions[user_id]['state']}")
        
        # Handle keyboard button presses first
        if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª":
            await self._add_section_handler(update)
        elif text == "‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å":
            await self._frequency_handler(update)
        elif text == "üìä –°—Ç–∞—Ç—É—Å":
            await self._status_handler(update)
        elif text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏":
            await self._manage_sections_handler(update)
        elif text == "üîß –û—Ç–ª–∞–¥–∫–∞":
            await self._debug_handler(update)
        elif text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
            user_id = str(update.effective_user.id)
            self.user_sessions[user_id]['state'] = 'main_menu'
            
            # Get real data from database
            subscriptions = self.user_manager.get_user_subscriptions(user_id)
            user_stats = self.user_manager.get_user_stats(user_id)
            
            await update.message.reply_text(
                f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                f"üìä –í–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã: {len(subscriptions)}\n"
                f"‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {self._format_frequency(user_stats['frequency'])}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self._get_main_keyboard()
            )
        elif text == "1 —á–∞—Å":
            await self._set_frequency_handler(update, "1h")
        elif text == "4 —á–∞—Å–∞":
            await self._set_frequency_handler(update, "4h")
        elif text == "12 —á–∞—Å–æ–≤":
            await self._set_frequency_handler(update, "12h")
        elif text == "1 –¥–µ–Ω—å":
            await self._set_frequency_handler(update, "1d")
        elif text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await self._back_to_main_from_frequency_handler(update)
        elif self.user_sessions[user_id]['state'] == 'waiting_for_url':
            logger.info(f"Processing URLs for user {user_id}, text: {text}")
            await self._process_urls(update, text)
        else:
            logger.info(f"User {user_id} not in waiting_for_url state, current state: {self.user_sessions[user_id]['state']}, text: {text}, showing main menu")
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                reply_markup=self._get_main_keyboard()
            )
    
    async def _add_section_handler(self, update: Update):
        """Handle add section button press"""
        user_id = str(update.effective_user.id)
        
        # Initialize user session if not exists
        if user_id not in self.user_sessions:
            self.user_sessions[user_id] = {'state': 'main_menu', 'sections': [], 'frequency': '1h'}
        
        self.user_sessions[user_id]['state'] = 'waiting_for_url'
        logger.info(f"Set user {user_id} state to waiting_for_url")
        
        await update.message.reply_text(
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª ss.lv\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:\n"
            "‚Ä¢ https://www.ss.lv/lv/real-estate/flats/riga/\n"
            "‚Ä¢ https://www.ss.lv/lv/real-estate/homes-summer-residences/riga/\n"
            "‚Ä¢ https://www.ss.lv/lv/real-estate/flats/jurmala/\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
            reply_markup=self._get_add_section_keyboard()
        )
    
    async def _frequency_handler(self, update: Update):
        """Handle frequency button press"""
        user_id = str(update.effective_user.id)
        current_freq = self.user_sessions.get(user_id, {}).get('frequency', '1h')
        
        await update.message.reply_text(
            f"‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏\n\n"
            f"–¢–µ–∫—É—â–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {self._format_frequency(current_freq)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å:",
            reply_markup=self._get_frequency_keyboard()
        )
    
    async def _status_handler(self, update: Update):
        """Handle status button press"""
        user_id = str(update.effective_user.id)
        subscriptions = self.user_manager.get_user_subscriptions(user_id)
        user_stats = self.user_manager.get_user_stats(user_id)
        
        # Get database stats
        total_ads = self.db_manager.get_total_ads_count()
        
        status_text = f"""
üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

ü§ñ –ë–æ—Ç: –†–∞–±–æ—Ç–∞–µ—Ç ‚úÖ
üìà –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ: {total_ads}
üë§ –í–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã: {len(subscriptions)}
‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {self._format_frequency(user_stats['frequency'])}

üìã –í–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã:
{chr(10).join([f"‚Ä¢ {sub.url}" for sub in subscriptions]) if subscriptions else "‚Ä¢ –ù–µ—Ç —Ä–∞–∑–¥–µ–ª–æ–≤"}

üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {user_stats['last_updated'].strftime('%Y-%m-%d %H:%M') if user_stats['last_updated'] else '–ù–∏–∫–æ–≥–¥–∞'}

‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!
"""
        
        await update.message.reply_text(
            status_text,
            reply_markup=self._get_main_keyboard()
        )
    
    async def _manage_sections_handler(self, update: Update):
        """Handle manage sections button press"""
        user_id = str(update.effective_user.id)
        subscriptions = self.user_manager.get_user_subscriptions(user_id)
        
        if not subscriptions:
            await update.message.reply_text(
                "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫.",
                reply_markup=self._get_main_keyboard()
            )
            return
        
        # Create keyboard with subscription buttons
        keyboard = []
        for sub in subscriptions:
            display_name = self._format_url_for_display(sub.url)
            keyboard.append([InlineKeyboardButton(
                f"üóëÔ∏è {display_name}",
                callback_data=f"delete_section_{sub.id}"
            )])
        
        sections_text = "\n".join([f"‚Ä¢ {self._format_url_for_display(sub.url)}" for sub in subscriptions])
        
        await update.message.reply_text(
            f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏\n\n"
            f"–í–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã:\n{sections_text}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    
    async def _set_frequency_handler(self, update: Update, frequency: str):
        """Handle frequency selection button press"""
        user_id = str(update.effective_user.id)
        
        # Update frequency in database
        success = self.user_manager.update_user_frequency(user_id, frequency)
        
        if success:
            # Update session
            self.user_sessions[user_id]['frequency'] = frequency
            
            await update.message.reply_text(
                f"‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"–ù–æ–≤–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {self._format_frequency(frequency)}\n\n"
                "–ë–æ—Ç –±—É–¥–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π.",
                reply_markup=self._get_main_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self._get_frequency_keyboard()
            )
    
    async def _back_to_main_from_frequency_handler(self, update: Update):
        """Handle back to main menu from frequency selection"""
        user_id = str(update.effective_user.id)
        
        # Get real data from database
        subscriptions = self.user_manager.get_user_subscriptions(user_id)
        user_stats = self.user_manager.get_user_stats(user_id)
        
        await update.message.reply_text(
            f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            f"üìä –í–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã: {len(subscriptions)}\n"
            f"‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {self._format_frequency(user_stats['frequency'])}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self._get_main_keyboard()
        )
    
    async def _debug_handler(self, update: Update):
        """Handle debug button press"""
        user_id = str(update.effective_user.id)
        subscriptions = self.user_manager.get_user_subscriptions(user_id)
        
        if not subscriptions:
            await update.message.reply_text(
                "üîß –û—Ç–ª–∞–¥–∫–∞\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
                "–î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑–¥–µ–ª—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª'.",
                reply_markup=self._get_main_keyboard()
            )
            return
        
        await update.message.reply_text(
            "üîß –û—Ç–ª–∞–¥–∫–∞\n\n"
            "–°–∫–∞–Ω–∏—Ä—É—é –≤–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=self._get_main_keyboard()
        )
        
        # Test each subscription
        debug_results = []
        for sub in subscriptions:
            try:
                ads = await self._test_parse_section(sub.url)
                debug_results.append({
                    'url': sub.url,
                    'display_name': self._format_url_for_display(sub.url),
                    'ads': ads[:2]  # Last 2 ads
                })
            except Exception as e:
                debug_results.append({
                    'url': sub.url,
                    'display_name': self._format_url_for_display(sub.url),
                    'error': str(e)
                })
        
        # Format results
        result_text = "üîß –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∞–¥–∫–∏ (–æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ)\n\n"
        
        for result in debug_results:
            result_text += f"üìã {result['display_name']}\n"
            if 'error' in result:
                result_text += f"‚ùå –û—à–∏–±–∫–∞: {result['error']}\n\n"
            elif result['ads']:
                result_text += f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ: {len(result['ads'])}\n"
                for i, ad in enumerate(result['ads'], 1):
                    result_text += f"{i}. {ad.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                    if ad.get('price'):
                        result_text += f"   üí∞ {ad['price']}\n"
                    if ad.get('location'):
                        result_text += f"   üìç {ad['location']}\n"
                    if ad.get('link'):
                        result_text += f"   üîó {ad['link']}\n"
                result_text += "\n"
            else:
                result_text += "‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                result_text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏\n\n"
        
        await update.message.reply_text(
            result_text,
            reply_markup=self._get_main_keyboard()
        )
    
    async def _test_parse_section(self, url: str) -> list:
        """Test parse a section and return ads"""
        import requests
        from bs4 import BeautifulSoup
        
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            # Always try with /all/sell/ first for better results
            if not url.endswith('/all/sell/'):
                target_url = url.rstrip('/') + '/all/sell/'
                logger.info(f"Trying URL with /all/sell/: {target_url}")
            else:
                target_url = url
            
            response = requests.get(target_url, headers=headers, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            ads = self._extract_ads_from_soup(soup)
            
            # If no ads found with /all/sell/, try original URL as fallback
            if not ads and target_url != url:
                logger.info(f"No ads found in {target_url}, trying original URL: {url}")
                try:
                    response = requests.get(url, headers=headers, timeout=10)
                    response.raise_for_status()
                    soup = BeautifulSoup(response.content, 'html.parser')
                    ads = self._extract_ads_from_soup(soup)
                except Exception as e:
                    logger.error(f"Error parsing original URL {url}: {e}")
            
            return ads
            
        except Exception as e:
            logger.error(f"Error parsing {url}: {e}")
            return []
    
    def _extract_ads_from_soup(self, soup) -> list:
        """Extract ads from BeautifulSoup object"""
        ads = []
        
        # Find ad containers - look for table rows with specific structure
        ad_containers = soup.find_all('tr', {'id': lambda x: x and x.startswith('tr_')})
        
        for container in ad_containers[:2]:  # Get first 2 ads
            ad = {}
            
            # Extract title and link
            title_elem = container.find('a', {'id': lambda x: x and x.startswith('dm_')})
            if title_elem:
                ad['title'] = title_elem.get_text(strip=True)
                ad['link'] = 'https://www.ss.lv' + title_elem.get('href', '')
            
            # Extract price - look in the right column
            price_cell = container.find('td', {'class': 'msga2-o', 'id': lambda x: x and 'price' in x})
            if price_cell:
                ad['price'] = price_cell.get_text(strip=True)
            
            # Extract location - look for location cell
            location_cell = container.find('td', {'class': 'msga2-o', 'id': lambda x: x and 'pageid' in x})
            if location_cell:
                ad['location'] = location_cell.get_text(strip=True)
            
            # If we found title and link, it's a valid ad
            if ad.get('title') and ad.get('link'):
                ads.append(ad)
        
        return ads
    
    async def _process_urls(self, update: Update, text: str):
        """Process single URL from user input"""
        user_id = str(update.effective_user.id)
        
        logger.info(f"Processing URL for user {user_id}: {text}")
        
        # Validate single URL
        if not self._is_valid_ss_url(text):
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ ss.lv\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n" +
                "‚Ä¢ https://www.ss.lv/lv/real-estate/flats/riga/\n" +
                "‚Ä¢ https://www.ss.lv/lv/real-estate/homes-summer-residences/riga/\n" +
                "‚Ä¢ https://www.ss.lv/lv/real-estate/flats/jurmala/\n\n" +
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'.",
                reply_markup=self._get_add_section_keyboard()
            )
            return
        
        # Check if URL already exists
        existing_subscriptions = self.user_manager.get_user_subscriptions(user_id)
        if any(sub.url == text for sub in existing_subscriptions):
            await update.message.reply_text(
                "‚ö†Ô∏è –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'.",
                reply_markup=self._get_add_section_keyboard()
            )
            return
        
        # Test parse the section to get examples
        await update.message.reply_text(
            "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–∑–¥–µ–ª –∏ –ø–æ–ª—É—á–∞—é –ø—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=self._get_add_section_keyboard()
        )
        
        try:
            ads = await self._test_parse_section(text)
            
            # Save the subscription
            success = self.user_manager.create_user_subscription(
                user_id=user_id,
                url=text,
                frequency="1h"
            )
            
            if not success:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–¥–µ–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            # Format success message
            display_name = self._format_url_for_display(text)
            success_text = f"‚úÖ –†–∞–∑–¥–µ–ª –¥–æ–±–∞–≤–ª–µ–Ω: {display_name} (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∞)\n\n"
            
            if ads:
                success_text += "üìã –ü—Ä–∏–º–µ—Ä—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n"
                for i, ad in enumerate(ads[:2], 1):
                    success_text += f"{i}. {ad.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                    if ad.get('price'):
                        success_text += f"   üí∞ {ad['price']}\n"
                    if ad.get('location'):
                        success_text += f"   üìç {ad['location']}\n"
                    if ad.get('link'):
                        success_text += f"   üîó {ad['link']}\n"
                success_text += "\n"
            else:
                success_text += "‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n"
                success_text += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                success_text += "‚Ä¢ –†–∞–∑–¥–µ–ª –ø—É—Å—Ç –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                success_text += "‚Ä¢ –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ (—Ç–æ–ª—å–∫–æ –∞—Ä–µ–Ω–¥–∞)\n"
                success_text += "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–∑–¥–µ–ª\n"
                success_text += "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º —Å–∞–π—Ç–∞\n\n"
            
            # Get updated count
            updated_subscriptions = self.user_manager.get_user_subscriptions(user_id)
            success_text += f"üìä –í—Å–µ–≥–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {len(updated_subscriptions)}\n\n"
            success_text += "üí° –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑–¥–µ–ª—ã - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É!\n"
            success_text += "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
            
            await update.message.reply_text(
                success_text,
                reply_markup=self._get_add_section_keyboard()
            )
            
        except Exception as e:
            logger.error(f"Error processing URL {text}: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞–∑–¥–µ–ª–∞:\n{str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ'.",
                reply_markup=self._get_add_section_keyboard()
            )
    
    def _is_valid_ss_url(self, url: str) -> bool:
        """Check if URL is valid ss.lv URL"""
        return url.startswith('https://www.ss.lv/') and 'real-estate' in url
    
    def _format_url_for_display(self, url: str) -> str:
        """Format URL for display by parsing the page title"""
        try:
            # Try to get the display name from the page
            display_name = self._get_page_display_name(url)
            if display_name:
                return display_name
        except Exception as e:
            logger.warning(f"Could not parse display name for {url}: {e}")
        
        # Fallback to URL-based parsing
        if 'flats' in url:
            return "–ö–≤–∞—Ä—Ç–∏—Ä—ã"
        elif 'homes-summer-residences' in url:
            return "–î–æ–º–∞"
        else:
            return url.replace('https://www.ss.lv/', 'ss.lv/')
    
    def _get_page_display_name(self, url: str) -> str:
        """Get display name by parsing the page title"""
        import requests
        from bs4 import BeautifulSoup
        
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            # Add /all/sell/ to URL for better results
            if not url.endswith('/all/sell/'):
                target_url = url.rstrip('/') + '/all/sell/'
            else:
                target_url = url
            
            response = requests.get(target_url, headers=headers, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Get title from page
            title_element = soup.find('title')
            if title_element:
                title = title_element.get_text(strip=True)
                # Extract meaningful part from title (usually after " - ")
                if ' - ' in title:
                    parts = title.split(' - ')
                    if len(parts) >= 2:
                        return parts[1].strip()
                # If no " - " found, return the whole title
                return title
            
            return None
            
        except Exception as e:
            logger.error(f"Error parsing display name from {url}: {e}")
            return None
    
    def _format_frequency(self, freq: str) -> str:
        """Format frequency for display"""
        freq_map = {
            '1h': '1 —á–∞—Å',
            '4h': '4 —á–∞—Å–∞', 
            '12h': '12 —á–∞—Å–æ–≤',
            '1d': '1 –¥–µ–Ω—å'
        }
        return freq_map.get(freq, '1 —á–∞—Å')
    
    async def _status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Status command handler"""
        try:
            user_id = str(update.effective_user.id)
            subscriptions = self.user_manager.get_user_subscriptions(user_id)
            user_stats = self.user_manager.get_user_stats(user_id)
            
            # Get database stats
            total_ads = self.db_manager.get_total_ads_count()
            
            status_text = f"""
üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

ü§ñ –ë–æ—Ç: –†–∞–±–æ—Ç–∞–µ—Ç ‚úÖ
üìà –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ: {total_ads}
üë§ –í–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã: {len(subscriptions)}
‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: {self._format_frequency(user_stats['frequency'])}

üìã –í–∞—à–∏ —Ä–∞–∑–¥–µ–ª—ã:
{chr(10).join([f"‚Ä¢ {sub.url}" for sub in subscriptions]) if subscriptions else "‚Ä¢ –ù–µ—Ç —Ä–∞–∑–¥–µ–ª–æ–≤"}

üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {user_stats['last_updated'].strftime('%Y-%m-%d %H:%M') if user_stats['last_updated'] else '–ù–∏–∫–æ–≥–¥–∞'}

‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!
"""
            
            await update.message.reply_text(
                status_text,
                reply_markup=self._get_main_keyboard()
            )
            
        except Exception as e:
            logger.error(f"Error in status command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
    
    async def send_message(self, chat_id: str, message: str):
        """Send message to user"""
        try:
            await self.application.bot.send_message(chat_id=chat_id, text=message)
        except Exception as e:
            logger.error(f"Error sending message to {chat_id}: {e}")
    
    def run(self):
        """Run the bot"""
        try:
            logger.info("Starting Interactive SS.lv Monitor Bot...")
            
            # Start bot
            logger.info("Bot is ready! Send /start to your bot in Telegram")
            logger.info("Press Ctrl+C to stop the bot")
            
            # Run the bot
            self.application.run_polling(drop_pending_updates=True)
            
        except KeyboardInterrupt:
            logger.info("Received keyboard interrupt, shutting down...")
        except Exception as e:
            logger.error(f"Error starting bot: {e}")
            raise
