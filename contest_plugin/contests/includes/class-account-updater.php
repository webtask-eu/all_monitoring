<?php
/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 */
class Account_Updater
{
    // –ö–ª—é—á–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ–ø—Ü–∏—è—Ö WordPress
    const QUEUE_OPTION_PREFIX = 'contest_accounts_update_queue_';
    const STATUS_OPTION_PREFIX = 'contest_accounts_update_status_';
    const AUTO_UPDATE_LAST_RUN = 'contest_create_queues_last_run';
    const BATCH_SIZE = 2; // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ - —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 2, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ API —Å–µ—Ä–≤–µ—Ä–∞ V2023.11.21
    const BATCH_INTERVAL = 60; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 –º–∏–Ω—É—Ç–∞) –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∞–π–º–∞—É—Ç –æ—á–µ—Ä–µ–¥–µ–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
     * 
     * @return int –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     */
    private static function get_queue_timeout() {
        $auto_update_settings = get_option('fttrader_auto_update_settings', []);
        $timeout_minutes = isset($auto_update_settings['fttrader_auto_update_timeout']) 
            ? intval($auto_update_settings['fttrader_auto_update_timeout']) 
            : 30; // 30 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        return $timeout_minutes * 60; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤
     *
     * @param array $account_ids –ú–∞—Å—Å–∏–≤ ID —Å—á–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param bool $is_auto_update –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
     * @param int|null $contest_id ID –∫–æ–Ω–∫—É—Ä—Å–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
     * @return array –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
     */
    public static function init_queue($account_ids, $is_auto_update = false, $contest_id = null)
    {
        global $wpdb;

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º API-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ process_trading_account
        $api_handler_file = plugin_dir_path(__FILE__) . 'class-api-handler.php';
        if (file_exists($api_handler_file)) {
            require_once $api_handler_file;
        }

        // –ï—Å–ª–∏ contest_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—á–µ—Ç–∞
        if (empty($contest_id) && !empty($account_ids)) {
            $first_account_id = reset($account_ids);
            $table_name = $wpdb->prefix . 'contest_members';
            $contest_id = $wpdb->get_var($wpdb->prepare(
                "SELECT contest_id FROM $table_name WHERE id = %d",
                $first_account_id
            ));
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        $auto_update_settings = get_option('fttrader_auto_update_settings', []);
        $processing_mode = isset($auto_update_settings['fttrader_processing_mode']) ? 
            $auto_update_settings['fttrader_processing_mode'] : 'batch';

        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
        $letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $random_letters = '';
        for ($i = 0; $i < 4; $i++) {
            $random_letters .= $letters[rand(0, strlen($letters) - 1)];
        }
        $queue_id = 'q' . $random_letters;
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π ID –æ—á–µ—Ä–µ–¥–∏ –∏ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        error_log("Created queue_id: " . $queue_id . " (mode: " . $processing_mode . ")");
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å —á–µ—Ä–µ–∑ wp_add_inline_script
        $mode_label = ($processing_mode === 'sequential') ? '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π' : '–ë–∞—Ç—á–µ–≤—ã–π';
        $script = "console.log('%cüÜî –°–æ–∑–¥–∞–Ω Queue ID: " . $queue_id . " (" . $mode_label . ")', 'background:#3498db;color:white;padding:4px 8px;border-radius:3px;font-weight:bold;');";
        wp_add_inline_script('jquery', $script);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º contest_id + queue_id –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –æ–ø—Ü–∏–π
        // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        $contest_prefix = $contest_id ? $contest_id : 'global';
        $queue_option = self::QUEUE_OPTION_PREFIX . $contest_prefix . '_' . $queue_id;
        $status_option = self::STATUS_OPTION_PREFIX . $contest_prefix . '_' . $queue_id;

        if (empty($account_ids)) {
            return ['success' => false, 'message' => '–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞', 'contest_id' => $contest_id, 'queue_id' => $queue_id];
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–µ
        $current_user = wp_get_current_user();
        $initiator_info = [
            'type' => $is_auto_update ? 'auto' : 'manual',
            'user_id' => $current_user->ID,
            'user_login' => $current_user->user_login,
            'user_display_name' => $current_user->display_name,
            'ip_address' => $_SERVER['REMOTE_ADDR'] ?? 'unknown'
        ];

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        $status = [
            'queue_id' => $queue_id,
            'contest_id' => $contest_id,
            'total' => count($account_ids),
            'completed' => 0,
            'success' => 0,
            'failed' => 0,
            'start_time' => time(),
            'last_update' => time(),
            'is_running' => true,
            'current_batch' => 0,
            'is_auto_update' => $is_auto_update,
            'processing_mode' => $processing_mode, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            'initiator' => $initiator_info, // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–µ
            'accounts' => [], // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞
            'status_option' => $status_option, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –æ–ø—Ü–∏–∏, —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            'queue_option' => $queue_option // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –æ–ø—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏
        ];

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞
        foreach ($account_ids as $id) {
            $status['accounts'][$id] = [
                'status' => 'pending', // pending, processing, success, failed
                'message' => '',
                'start_time' => 0,
                'end_time' => 0
            ];
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—á–µ—Ä–µ–¥—å
        update_option($status_option, $status);
        update_option($queue_option, $account_ids);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–æ–≤–æ–π –æ—á–µ—Ä–µ–¥–∏ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        self::register_active_queue($contest_id, $queue_id, $status_option);

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        $initial_delay = 2; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
        $scheduled = wp_schedule_single_event(time() + $initial_delay, 'process_accounts_update_batch', [$contest_id, $queue_id]);
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
        error_log("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø –û–ß–ï–†–ï–î–ò {$queue_id} ===");
        error_log("–†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏: " . $processing_mode);
        error_log("–ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: " . $initial_delay . " —Å–µ–∫");
        error_log("–†–µ–∑—É–ª—å—Ç–∞—Ç wp_schedule_single_event: " . ($scheduled ? 'SUCCESS' : 'FAILED'));
        error_log("Contest ID: " . ($contest_id ? $contest_id : 'global'));
        error_log("–í—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " . date('Y-m-d H:i:s', time() + $initial_delay));
        error_log("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: " . count($account_ids));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞
        $scheduled_events = wp_get_scheduled_event('process_accounts_update_batch', [$contest_id, $queue_id]);
        error_log("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ: " . ($scheduled_events ? 'YES' : 'NO'));
        if ($scheduled_events) {
            error_log("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: " . date('Y-m-d H:i:s', $scheduled_events->timestamp));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WP Cron
        $cron_array = _get_cron_array();
        $our_events_count = 0;
        if (is_array($cron_array)) {
            foreach ($cron_array as $timestamp => $events) {
                if (isset($events['process_accounts_update_batch'])) {
                    $our_events_count += count($events['process_accounts_update_batch']);
                }
            }
        }
        error_log("–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π 'process_accounts_update_batch' –≤ –æ—á–µ—Ä–µ–¥–∏ WP Cron: " . $our_events_count);
        error_log("=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø ===");
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á WP Cron —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if ($scheduled) {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –í–°–ï–• –æ—á–µ—Ä–µ–¥–µ–π (—É–±—Ä–∞–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 50 —Å—á–µ—Ç–æ–≤)
            error_log("–û—á–µ—Ä–µ–¥—å ({$queue_id}): –∑–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ spawn_cron");
            spawn_cron();
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π
            wp_schedule_single_event(time() + 1, 'process_accounts_update_batch', [$contest_id, $queue_id]);
            error_log("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {$queue_id}");
        } else {
            // –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
            error_log("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {$queue_id}. –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.");
            $direct_process_result = self::process_batch($contest_id, $queue_id);
            error_log("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: " . ($direct_process_result ? 'SUCCESS' : 'FAILED'));
        }

        return [
            'success' => true,
            'queue_id' => $queue_id,
            'contest_id' => $contest_id,
            'total' => count($account_ids),
            'message' => '–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞'
        ];
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞
     * 
     * @param int|null $contest_id ID –∫–æ–Ω–∫—É—Ä—Å–∞
     * @param string $queue_id ID –æ—á–µ—Ä–µ–¥–∏
     * @param string $status_option –ò–º—è –æ–ø—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
     */
    private static function register_active_queue($contest_id, $queue_id, $status_option) {
        $contest_key = 'contest_active_queues_' . ($contest_id ? $contest_id : 'global');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
        $active_queues = get_option($contest_key, []);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å
        $active_queues[$queue_id] = [
            'status_option' => $status_option,
            'start_time' => time()
        ];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        update_option($contest_key, $active_queues);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
     * 
     * @param int|null $contest_id ID –∫–æ–Ω–∫—É—Ä—Å–∞
     * @param string $queue_id ID –æ—á–µ—Ä–µ–¥–∏
     */
    private static function unregister_active_queue($contest_id, $queue_id) {
        $contest_key = 'contest_active_queues_' . ($contest_id ? $contest_id : 'global');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
        $active_queues = get_option($contest_key, []);
        
        // –£–¥–∞–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
        if (isset($active_queues[$queue_id])) {
            unset($active_queues[$queue_id]);
            update_option($contest_key, $active_queues);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ä—Ü–∏—é —Å—á–µ—Ç–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     *
     * @param int|null $contest_id ID –∫–æ–Ω–∫—É—Ä—Å–∞
     * @param string|null $queue_id ID –æ—á–µ—Ä–µ–¥–∏
     * @return bool –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ—Ä—Ü–∏—è
     */
    public static function process_batch($contest_id = null, $queue_id = null)
    {
        global $wpdb;

        // –î–û–ë–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞
        error_log("=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ü–ê–ö–ï–¢–ê ===");
        error_log("Queue ID: " . ($queue_id ? $queue_id : 'NULL'));
        error_log("Contest ID: " . ($contest_id ? $contest_id : 'NULL')); 
        error_log("–í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞: " . date('Y-m-d H:i:s'));
        error_log("–í—ã–∑–≤–∞–Ω–æ –∏–∑: " . wp_debug_backtrace_summary());

        // –ï—Å–ª–∏ queue_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if (empty($queue_id)) {
            $status_option = self::STATUS_OPTION_PREFIX . ($contest_id ? $contest_id : 'global');
            $queue_option = self::QUEUE_OPTION_PREFIX . ($contest_id ? $contest_id : 'global');
            error_log("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–ø—Ü–∏–π (–±–µ–∑ queue_id)");
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π queue_id
            $contest_prefix = $contest_id ? $contest_id : 'global';
            $status_option = self::STATUS_OPTION_PREFIX . $contest_prefix . '_' . $queue_id;
            $queue_option = self::QUEUE_OPTION_PREFIX . $contest_prefix . '_' . $queue_id;
            error_log("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –æ–ø—Ü–∏–∏ –¥–ª—è queue_id {$queue_id}:");
            error_log("- Status option: {$status_option}");
            error_log("- Queue option: {$queue_option}");
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        $status = get_option($status_option, []);
        $queue = get_option($queue_option, []);

        // –î–û–ë–ê–í–õ–ï–ù–û: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ—á–µ—Ä–µ–¥–∏
        error_log("–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω: " . (empty($status) ? '–ü–£–°–¢–û–ô' : '–ù–ê–ô–î–ï–ù'));
        if (!empty($status)) {
            error_log("- is_running: " . ($status['is_running'] ? 'true' : 'false'));
            error_log("- total: " . ($status['total'] ?? '–Ω–µ –∑–∞–¥–∞–Ω–æ'));
            error_log("- completed: " . ($status['completed'] ?? '–Ω–µ –∑–∞–¥–∞–Ω–æ'));
            error_log("- current_batch: " . ($status['current_batch'] ?? '–Ω–µ –∑–∞–¥–∞–Ω–æ'));
            error_log("- contest_id –≤ —Å—Ç–∞—Ç—É—Å–µ: " . ($status['contest_id'] ?? '–Ω–µ –∑–∞–¥–∞–Ω–æ'));
        }
        
        error_log("–û—á–µ—Ä–µ–¥—å —Å—á–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞: " . (empty($queue) ? '–ü–£–°–¢–ê–Ø' : count($queue) . ' —Å—á–µ—Ç–æ–≤'));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
        if (empty($status) || empty($queue) || !$status['is_running']) {
            error_log("–û–°–¢–ê–ù–û–í–ö–ê: –û—á–µ—Ä–µ–¥—å –Ω–µ –ø—Ä–æ—à–ª–∞ –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏");
            error_log("- empty(status): " . (empty($status) ? 'true' : 'false'));
            error_log("- empty(queue): " . (empty($queue) ? 'true' : 'false'));
            error_log("- is_running: " . (isset($status['is_running']) ? ($status['is_running'] ? 'true' : 'false') : '–Ω–µ –∑–∞–¥–∞–Ω–æ'));
            error_log("=== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò (–ù–ï–£–î–ê–ß–ê) ===");
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ contest_id –≤ —Å—Ç–∞—Ç—É—Å–µ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
        if ($contest_id !== null && isset($status['contest_id']) && $status['contest_id'] != $contest_id) {
            error_log("–û–°–¢–ê–ù–û–í–ö–ê: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ contest_id");
            error_log("- –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π contest_id: {$contest_id} (—Ç–∏–ø: " . gettype($contest_id) . ")");
            error_log("- contest_id –≤ —Å—Ç–∞—Ç—É—Å–µ: " . $status['contest_id'] . " (—Ç–∏–ø: " . gettype($status['contest_id']) . ")");
            error_log("=== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò (–ù–ï–£–î–ê–ß–ê) ===");
            return false;
        }

        // –î–û–ë–ê–í–õ–ï–ù–û: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ API
        $parallel_delay = self::get_parallel_processing_delay();
        if ($parallel_delay > 0) {
            error_log("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏. –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞: {$parallel_delay} —Å–µ–∫ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {$queue_id}");
            sleep($parallel_delay);
        }

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        $auto_update_settings = get_option('fttrader_auto_update_settings', []);
        $processing_mode = isset($status['processing_mode']) ? $status['processing_mode'] : 'batch';
        
        // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤
        $batch_size = isset($auto_update_settings['fttrader_batch_size']) ? 
            intval($auto_update_settings['fttrader_batch_size']) : self::BATCH_SIZE;
        
        error_log("–ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç –∏–∑ {$batch_size} —Å—á–µ—Ç–æ–≤ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏)");

        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π –ø–æ—Ä—Ü–∏–∏
        $batch_start = $status['current_batch'] * $batch_size;
        $current_batch = array_slice($queue, $batch_start, $batch_size);
        
        // –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –£–±–∏—Ä–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ —Å—á–µ—Ç–∞ –∏–∑ –ø–∞–∫–µ—Ç–∞
        $filtered_batch = [];
        foreach ($current_batch as $account_id) {
            if (isset($status['accounts'][$account_id]) && $status['accounts'][$account_id]['status'] === 'processing') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—á–µ—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                $processing_time = time() - $status['accounts'][$account_id]['start_time'];
                if ($processing_time > 300) { // 5 –º–∏–Ω—É—Ç - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–π —Å—á–µ—Ç
                    $status['accounts'][$account_id]['status'] = 'pending';
                    $status['accounts'][$account_id]['message'] = '–°–±—Ä–æ—à–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≤–∏—Å–∞–Ω–∏—è';
                    error_log("–°–ë–†–û–° –ó–ê–í–ò–°–ê–ù–ò–Ø: –°—á–µ—Ç {$account_id} —Å–±—Ä–æ—à–µ–Ω –ø–æ—Å–ª–µ {$processing_time} —Å–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏");
                    $filtered_batch[] = $account_id;
                } else {
                    error_log("–ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø: –ü—Ä–æ–ø—É—Å–∫ —Å—á–µ—Ç–∞ {$account_id} - —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è " . ($processing_time) . " —Å–µ–∫");
                }
            } else {
                $filtered_batch[] = $account_id;
            }
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
        $current_batch = $filtered_batch;

        error_log("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ø–∞–∫–µ—Ç: –Ω–∞—á–∞–ª–æ={$batch_start}, —Ä–∞–∑–º–µ—Ä=" . count($current_batch) . " —Å—á–µ—Ç–æ–≤");
        if (!empty($current_batch)) {
            error_log("ID —Å—á–µ—Ç–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ: " . implode(', ', $current_batch));
        }

        // –ï—Å–ª–∏ –ø–æ—Ä—Ü–∏—è –ø—É—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –æ—á–µ—Ä–µ–¥—å
        if (empty($current_batch)) {
            error_log("–ü–ê–ö–ï–¢ –ü–£–°–¢–û–ô: –ù–µ—Ç —Å—á–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—á–µ—Ç–∞
            $status['current_batch']++;
            update_option($status_option, $status);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞
            $remaining_accounts = 0;
            foreach ($status['accounts'] as $account_status) {
                if ($account_status['status'] === 'pending') {
                    $remaining_accounts++;
                }
            }
            
            if ($remaining_accounts > 0) {
                error_log("–ü–ï–†–ï–•–û–î –ö –°–õ–ï–î–£–Æ–©–ï–ú–£ –ü–ê–ö–ï–¢–£: –û—Å—Ç–∞–ª–æ—Å—å {$remaining_accounts} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤");
                // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                wp_schedule_single_event(time() + 1, 'process_accounts_update_batch', [$contest_id, $queue_id]);
                return false;
            } else {
                error_log("–ó–ê–í–ï–†–®–ï–ù–ò–ï: –í—Å–µ —Å—á–µ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã");
                self::complete_queue($contest_id, $queue_id, $status_option, $queue_option);
                error_log("=== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò (–ó–ê–í–ï–†–®–ï–ù–û) ===");
                return true;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ process_trading_account
        if (!function_exists('process_trading_account')) {
            error_log("–ü–†–û–í–ï–†–ö–ê: –§—É–Ω–∫—Ü–∏—è process_trading_account –ù–ï –ù–ê–ô–î–ï–ù–ê, –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API handler");
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª —Å API-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
            $api_handler_file = plugin_dir_path(__FILE__) . 'class-api-handler.php';
            if (file_exists($api_handler_file)) {
                require_once $api_handler_file;
                error_log("API handler —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {$api_handler_file}");
                
                if (!function_exists('process_trading_account')) {
                    error_log("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§—É–Ω–∫—Ü–∏—è process_trading_account –í–°–ï –ï–©–ï –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞");
                    
                    // –û—Ç–º–µ—á–∞–µ–º —ç—Ç—É –ø–æ—Ä—Ü–∏—é –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—É—é
                    foreach ($current_batch as $account_id) {
                        $status['accounts'][$account_id]['status'] = 'failed';
                        $status['accounts'][$account_id]['message'] = '–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—á–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
                        $status['completed']++;
                        $status['failed']++;
                    }
                    $status['current_batch']++;
                    $status['last_update'] = time();
                    update_option($status_option, $status);
                    
                    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å—á–µ—Ç–∞
                    if ($status['completed'] < $status['total']) {
                        wp_schedule_single_event(time() + 1, 'process_accounts_update_batch', [$contest_id, $queue_id]);
                        error_log("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è –ø–æ—Ä—Ü–∏—è –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É —Ñ—É–Ω–∫—Ü–∏–∏");
                    } else {
                        self::complete_queue($contest_id, $queue_id, $status_option, $queue_option);
                        error_log("–û—á–µ—Ä–µ–¥—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏");
                    }
                    
                    error_log("=== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò (–û–®–ò–ë–ö–ê –§–£–ù–ö–¶–ò–ò) ===");
                    return false;
                } else {
                    error_log("–£–°–ü–ï–•: –§—É–Ω–∫—Ü–∏—è process_trading_account –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏");
                }
            } else {
                error_log("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: API handler —Ñ–∞–π–ª –ù–ï –ù–ê–ô–î–ï–ù: {$api_handler_file}");
                
                // –û—Ç–º–µ—á–∞–µ–º —ç—Ç—É –ø–æ—Ä—Ü–∏—é –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—É—é
                foreach ($current_batch as $account_id) {
                    $status['accounts'][$account_id]['status'] = 'failed';
                    $status['accounts'][$account_id]['message'] = '–û—à–∏–±–∫–∞: API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                    $status['completed']++;
                    $status['failed']++;
                }
                $status['current_batch']++;
                $status['last_update'] = time();
                update_option($status_option, $status);
                
                error_log("=== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò (–û–®–ò–ë–ö–ê –§–ê–ô–õ–ê API) ===");
                return false;
            }
        } else {
            error_log("–ü–†–û–í–ï–†–ö–ê: –§—É–Ω–∫—Ü–∏—è process_trading_account –î–û–°–¢–£–ü–ù–ê");
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç–∞ –≤ –ø–æ—Ä—Ü–∏–∏
        $batch_size_actual = min($batch_size, count($current_batch));
        $current_batch_success_count = 0; // –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–º –ø–∞–∫–µ—Ç–µ
        $account_index = 0; // –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ
        
        error_log("–ù–ê–ß–ê–õ–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ #{$status['current_batch']} ({$batch_size_actual} —Å—á–µ—Ç–æ–≤)");
        
        // –í–´–ë–û–† –†–ï–ñ–ò–ú–ê –û–ë–†–ê–ë–û–¢–ö–ò: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π
        if ($processing_mode === 'batch') {
            // –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¥–ª—è batch —Ä–µ–∂–∏–º–∞
            error_log("–†–ï–ñ–ò–ú: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –∏–∑ {$batch_size_actual} —Å—á–µ—Ç–æ–≤");
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º queue_batch_id –¥–ª—è –ø–∞–∫–µ—Ç–∞
            if (!empty($queue_id)) {
                $queue_batch_id = $queue_id;
            } else {
                $letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
                $random_letters = '';
                for ($i = 0; $i < 4; $i++) {
                    $random_letters .= $letters[rand(0, strlen($letters) - 1)];
                }
                $queue_batch_id = 'b' . $random_letters;
            }
            
            // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Å—á–µ—Ç–∞ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ
            foreach ($current_batch as $account_id) {
                $status['accounts'][$account_id]['status'] = 'processing';
                $status['accounts'][$account_id]['start_time'] = time();
            }
            update_option($status_option, $status);
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            $parallel_results = self::process_accounts_parallel($current_batch, $queue_batch_id);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            foreach ($current_batch as $account_id) {
                $account_index++;
                
                if (isset($parallel_results[$account_id])) {
                    $result = $parallel_results[$account_id];
                    
                    error_log("–ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¥–ª—è —Å—á–µ—Ç–∞ {$account_id}: " . ($result['success'] ? 'SUCCESS' : 'FAILED') . " - " . $result['message']);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞
                    if ($result['success']) {
                        $status['accounts'][$account_id]['status'] = 'success';
                        $status['accounts'][$account_id]['message'] = $result['message'];
                        $status['success']++;
                        $current_batch_success_count++;
                    } else {
                        $status['accounts'][$account_id]['status'] = 'failed';
                        $status['accounts'][$account_id]['message'] = $result['message'];
                        $status['failed']++;
                    }
                    
                    $status['accounts'][$account_id]['end_time'] = time();
                    $status['completed']++;
                } else {
                    // –°—á–µ—Ç –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                    error_log("–û–®–ò–ë–ö–ê: –°—á–µ—Ç {$account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏");
                    $status['accounts'][$account_id]['status'] = 'failed';
                    $status['accounts'][$account_id]['message'] = '–°—á–µ—Ç –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω';
                    $status['accounts'][$account_id]['end_time'] = time();
                    $status['failed']++;
                    $status['completed']++;
                }
            }
            
        } else {
            // –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¥–ª—è sequential —Ä–µ–∂–∏–º–∞
            error_log("–†–ï–ñ–ò–ú: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –∏–∑ {$batch_size_actual} —Å—á–µ—Ç–æ–≤");
            
            foreach ($current_batch as $account_id) {
                $account_index++;
                error_log("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—á–µ—Ç–∞ ID: {$account_id} ({$account_index}/{$batch_size_actual} –≤ –ø–∞–∫–µ—Ç–µ)");
                
                // –ü–æ–º–µ—á–∞–µ–º —Å—á–µ—Ç –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
                $status['accounts'][$account_id]['status'] = 'processing';
                $status['accounts'][$account_id]['start_time'] = time();
                update_option($status_option, $status);

                try {
                    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π queue_batch_id
                    if (!empty($queue_id)) {
                        $queue_batch_id = $queue_id;
                    } else {
                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π queue_batch_id –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        $letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
                        $random_letters = '';
                        for ($i = 0; $i < 4; $i++) {
                            $random_letters .= $letters[rand(0, strlen($letters) - 1)];
                        }
                        $queue_batch_id = 'b' . $random_letters; // b –æ–∑–Ω–∞—á–∞–µ—Ç batch update
                    }
                    
                    error_log("–í—ã–∑–æ–≤ process_trading_account –¥–ª—è —Å—á–µ—Ç–∞ {$account_id} —Å queue_batch_id: {$queue_batch_id}");
                    $result = process_trading_account([], $account_id, null, $queue_batch_id);
                    error_log("=== –†–ï–ó–£–õ–¨–¢–ê–¢ API –î–õ–Ø –°–ß–ï–¢–ê {$account_id} ===");
                    error_log("SUCCESS: " . ($result['success'] ? 'TRUE' : 'FALSE'));
                    error_log("MESSAGE: " . ($result['message'] ?? '–ù–ï–¢ –°–û–û–ë–©–ï–ù–ò–Ø'));
                    error_log("–î–ê–ù–ù–´–ï: " . print_r($result, true));
                    error_log("=== –ö–û–ù–ï–¶ –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===");
                    error_log("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—á–µ—Ç–∞ {$account_id}: " . ($result['success'] ? 'SUCCESS' : 'FAILED') . " - " . $result['message']);

                    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
                    $account_data = $wpdb->get_row($wpdb->prepare(
                        "SELECT connection_status, error_description, balance, equity, margin, leverage FROM {$wpdb->prefix}contest_members WHERE id = %d",
                        $account_id
                    ), ARRAY_A);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
                    if ($result['success']) {
                        $status['accounts'][$account_id]['status'] = 'success';
                        $status['accounts'][$account_id]['message'] = $result['message'];
                        $status['success']++;
                        $current_batch_success_count++;
                    } else {
                        $status['accounts'][$account_id]['status'] = 'failed';
                        $status['accounts'][$account_id]['message'] = $result['message'];
                        $status['failed']++;
                    }

                    $status['accounts'][$account_id]['end_time'] = time();
                    $status['completed']++;
                    $status['last_update'] = time();
                    update_option($status_option, $status);

                } catch (Exception $e) {
                    error_log("–ò–°–ö–õ–Æ–ß–ï–ù–ò–ï –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—á–µ—Ç–∞ {$account_id}: " . $e->getMessage());
                    $status['accounts'][$account_id]['status'] = 'failed';
                    $status['accounts'][$account_id]['message'] = '–û—à–∏–±–∫–∞: ' . $e->getMessage();
                    $status['accounts'][$account_id]['end_time'] = time();
                    $status['failed']++;
                    $status['completed']++;
                    $status['last_update'] = time();
                    update_option($status_option, $status);
                }
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
        $status['last_update'] = time();
        update_option($status_option, $status);

        error_log("–ó–ê–í–ï–†–®–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ #{$status['current_batch']} ({$batch_size_actual} —Å—á–µ—Ç–æ–≤). –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∑–∞–≤–µ—Ä—à–µ–Ω–æ={$status['completed']}, —É—Å–ø–µ—à–Ω–æ={$status['success']}, –æ—à–∏–±–æ–∫={$status['failed']}");

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Ä—Ü–∏–∏
        $status['current_batch']++;
        update_option($status_option, $status);

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π)
        if ($status['completed'] < $status['total']) {
            $remaining_accounts = $status['total'] - $status['completed'];
            $remaining_batches = ceil($remaining_accounts / $batch_size);
            error_log("–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï: –ï—Å—Ç—å –µ—â–µ —Å—á–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({$status['completed']}/{$status['total']}). –û—Å—Ç–∞–ª–æ—Å—å: {$remaining_accounts} —Å—á–µ—Ç–æ–≤ –≤ ~{$remaining_batches} –ø–∞–∫–µ—Ç–∞—Ö");
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if ($processing_mode === 'batch') {
                // Batch —Ä–µ–∂–∏–º: –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
                error_log("BATCH –†–ï–ñ–ò–ú: –ó–∞–ø—É—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞ –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ");
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–∞–∫–µ—Ç —Å—Ä–∞–∑—É –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
                return self::process_batch($contest_id, $queue_id);
            } else {
                // Sequential —Ä–µ–∂–∏–º: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
                $delay = 1;
                error_log("SEQUENTIAL –†–ï–ñ–ò–ú: –°–ª–µ–¥—É—é—â–∏–π –ø–∞–∫–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ {$delay} —Å–µ–∫");
            }
            
            // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è sequential —Ä–µ–∂–∏–º–∞ (–¥–ª—è batch —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ return –≤—ã—à–µ)
            if ($processing_mode === 'sequential') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞ –¥–ª—è —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
                $existing_task = wp_next_scheduled('process_accounts_update_batch', [$contest_id, $queue_id]);
                error_log("–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï_DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {$queue_id}. –ù–∞–π–¥–µ–Ω–æ: " . ($existing_task ? date('Y-m-d H:i:s', $existing_task) : '–Ω–µ—Ç'));
                if ($existing_task) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
                    if ($existing_task > time()) {
                        error_log("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {$queue_id} —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ " . date('Y-m-d H:i:s', $existing_task) . ". –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.");
                        return true;
                    } else {
                        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                        wp_unschedule_event($existing_task, 'process_accounts_update_batch', [$contest_id, $queue_id]);
                        error_log("–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï_DEBUG: –£–¥–∞–ª–µ–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {$queue_id}");
                    }
                }
                
                error_log("–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï_DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ {$queue_id} —á–µ—Ä–µ–∑ {$delay} —Å–µ–∫");
                $scheduled = wp_schedule_single_event(time() + $delay, 'process_accounts_update_batch', [$contest_id, $queue_id]);
                error_log("–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï_DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç wp_schedule_single_event: " . ($scheduled ? 'SUCCESS' : 'FAILED'));
                
                // –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                if (!$scheduled) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                    error_log(sprintf('–û–®–ò–ë–ö–ê –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø: WP-Cron –Ω–µ —Å–º–æ–≥ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–∞–∫–µ—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ %s (contest %s). Remaining accounts will not be processed automatically.', $queue_id, $contest_id));
                    // –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–º–µ—Ç–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—á–µ—Ç–∞ –∫–∞–∫ failed –∏–ª–∏ error_scheduling
                    // ... –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–º–µ—Ç–∫–∏ —Å—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                    // return self::process_batch($contest_id, $queue_id);
                } else {
                    $next_batch_number = $status['current_batch'] + 1;
                    error_log("–£–°–ü–ï–•: –°–ª–µ–¥—É—é—â–∏–π –ø–∞–∫–µ—Ç #{$next_batch_number} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ " . date('Y-m-d H:i:s', time() + $delay));
                    
                    // –Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ spawn_cron –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WP Cron
                    spawn_cron();
                    
                    error_log("–°–ª–µ–¥—É—é—â–∏–π –ø–∞–∫–µ—Ç #{$next_batch_number} –æ—á–µ—Ä–µ–¥–∏ {$queue_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ {$delay} —Å–µ–∫");
                }
            }
        } else {
            // –í—Å–µ —Å—á–µ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            error_log("–í–°–ï –°–ß–ï–¢–ê –û–ë–†–ê–ë–û–¢–ê–ù–´: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ {$queue_id}");
            self::complete_queue($contest_id, $queue_id, $status_option, $queue_option);
        }
        
        error_log("=== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –ü–ê–ö–ï–¢–ê (–£–°–ü–ï–•) ===");
        return true;
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
     * 
     * @param int|null $contest_id ID –∫–æ–Ω–∫—É—Ä—Å–∞
     * @param string|null $queue_id ID –æ—á–µ—Ä–µ–¥–∏
     * @param string $status_option –ò–º—è –æ–ø—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
     * @param string $queue_option –ò–º—è –æ–ø—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏
     */
    public static function complete_queue($contest_id = null, $queue_id = null, $status_option = '', $queue_option = '')
    {
        // –ï—Å–ª–∏ –æ–ø—Ü–∏–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏ queue_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if (empty($status_option) || empty($queue_option)) {
            if (empty($queue_id)) {
                $queue_option = self::QUEUE_OPTION_PREFIX . ($contest_id ? $contest_id : 'global');
                $status_option = self::STATUS_OPTION_PREFIX . ($contest_id ? $contest_id : 'global');
            } else {
                $contest_prefix = $contest_id ? $contest_id : 'global';
                $status_option = self::STATUS_OPTION_PREFIX . $contest_prefix . '_' . $queue_id;
                $queue_option = self::QUEUE_OPTION_PREFIX . $contest_prefix . '_' . $queue_id;
            }
        }
        
        $status = get_option($status_option, []);

        if (!empty($status)) {
            $status['is_running'] = false;
            $status['end_time'] = time();
            update_option($status_option, $status);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            $update_history = get_option('contest_accounts_update_history', []);

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ 50 –∑–∞–ø–∏—Å–µ–π
            if (count($update_history) >= 50) {
                $update_history = array_slice($update_history, -49);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            $update_history[] = [
                'start_time' => $status['start_time'],
                'end_time' => $status['end_time'],
                'total' => $status['total'],
                'success' => $status['success'],
                'failed' => $status['failed'],
                'contest_id' => $contest_id,
                'queue_id' => $queue_id,
                'is_auto_update' => isset($status['is_auto_update']) ? $status['is_auto_update'] : false
            ];

            update_option('contest_accounts_update_history', $update_history);
            
            // –£–¥–∞–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if (!empty($queue_id)) {
                self::unregister_active_queue($contest_id, $queue_id);
            }
        }

        // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        delete_option($queue_option);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     *
     * @param int|null $contest_id ID –∫–æ–Ω–∫—É—Ä—Å–∞
     * @param string|null $queue_id ID –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏)
     * @return array –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
     */
    public static function get_status($contest_id = null, $queue_id = null)
    {
        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π queue_id, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
        if (!empty($queue_id)) {
            $contest_prefix = $contest_id ? $contest_id : 'global';
            $status_option = self::STATUS_OPTION_PREFIX . $contest_prefix . '_' . $queue_id;
            
            $status = get_option($status_option, []);
            
            if (empty($status)) {
                return [
                    'is_running' => false,
                    'message' => '–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                    'contest_id' => $contest_id,
                    'queue_id' => $queue_id
                ];
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
            $timeout = self::get_queue_timeout(); // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if ($status['is_running'] && (time() - $status['last_update']) > $timeout) {
                $status['is_running'] = false;
                $timeout_duration = time() - $status['last_update'];
                $status['message'] = sprintf('–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ —Ç–∞–π–º-–∞—É—Ç–∞ (%d –º–∏–Ω)', round($timeout_duration / 60));
                $status['timeout'] = true;
                $status['timeout_reason'] = self::determine_timeout_reason($status, $timeout_duration);
                update_option($status_option, $status);
            }
            
            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ contest_id –∏ queue_id –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç–µ
            if (!isset($status['contest_id'])) {
                $status['contest_id'] = $contest_id;
            }
            if (!isset($status['queue_id'])) {
                $status['queue_id'] = $queue_id;
            }
            
            return $status;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞
        $contest_key = 'contest_active_queues_' . ($contest_id ? $contest_id : 'global');
        $active_queues = get_option($contest_key, []);
        
        if (empty($active_queues)) {
            // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            $old_status_option = self::STATUS_OPTION_PREFIX . ($contest_id ? $contest_id : 'global');
            $old_status = get_option($old_status_option, []);
            
            if (!empty($old_status) && isset($old_status['is_running']) && $old_status['is_running']) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                $timeout = self::get_queue_timeout(); // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if ((time() - $old_status['last_update']) > $timeout) {
                    $old_status['is_running'] = false;
                    $timeout_duration = time() - $old_status['last_update'];
                    $old_status['message'] = sprintf('–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ —Ç–∞–π–º-–∞—É—Ç–∞ (%d –º–∏–Ω)', round($timeout_duration / 60));
                    $old_status['timeout'] = true;
                    $old_status['timeout_reason'] = self::determine_timeout_reason($old_status, $timeout_duration);
                    update_option($old_status_option, $old_status);
                }
                
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ contest_id –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç–µ
                if (!isset($old_status['contest_id'])) {
                    $old_status['contest_id'] = $contest_id;
                }
                
                return $old_status;
            }
            
            return [
                'is_running' => false,
                'message' => '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                'contest_id' => $contest_id,
                'queues' => []
            ];
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥—è—Ö
        $queues = [];
        $total_accounts = 0;
        $completed_accounts = 0;
        $any_running = false;
        
        foreach ($active_queues as $q_id => $queue_info) {
            $status_option = $queue_info['status_option'];
            $queue_status = get_option($status_option, []);
            
            if (empty($queue_status)) {
                // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                unset($active_queues[$q_id]);
                continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
            $timeout = self::get_queue_timeout(); // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if ($queue_status['is_running'] && (time() - $queue_status['last_update']) > $timeout) {
                $queue_status['is_running'] = false;
                $timeout_duration = time() - $queue_status['last_update'];
                $queue_status['message'] = sprintf('–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ —Ç–∞–π–º-–∞—É—Ç–∞ (%d –º–∏–Ω)', round($timeout_duration / 60));
                $queue_status['timeout'] = true;
                $queue_status['timeout_reason'] = self::determine_timeout_reason($queue_status, $timeout_duration);
                update_option($status_option, $queue_status);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ queue_id
            $queue_status['queue_id'] = $q_id;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if ($queue_status['is_running']) {
                $any_running = true;
            }
            
            $total_accounts += isset($queue_status['total']) ? $queue_status['total'] : 0;
            $completed_accounts += isset($queue_status['completed']) ? $queue_status['completed'] : 0;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π
            $queues[$q_id] = $queue_status;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π (–µ—Å–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –æ—á–µ—Ä–µ–¥–∏ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞)
        if (count($active_queues) !== count($queues)) {
            update_option($contest_key, $active_queues);
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        $result = [
            'is_running' => $any_running,
            'message' => $any_running ? '–ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' : '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
            'contest_id' => $contest_id,
            'total' => $total_accounts,
            'completed' => $completed_accounts,
            'progress' => $total_accounts > 0 ? round(($completed_accounts / $total_accounts) * 100) : 0,
            'queues' => $queues,
            'queues_count' => count($queues)
        ];
        
        return $result;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏—á–∏–Ω—É —Ç–∞–π–º–∞—É—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–∏
     * 
     * @param array $status –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
     * @param int $timeout_duration –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–π–º–∞—É—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     * @return string –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã —Ç–∞–π–º–∞—É—Ç–∞
     */
    private static function determine_timeout_reason($status, $timeout_duration)
    {
        $reasons = [];
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        $progress = isset($status['completed'], $status['total']) && $status['total'] > 0 
            ? ($status['completed'] / $status['total']) * 100 
            : 0;
            
        if ($progress == 0) {
            $reasons[] = '–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É';
        } elseif ($progress < 10) {
            $reasons[] = '–û—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –≤ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏';
        } elseif ($progress < 90) {
            $reasons[] = '–û—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏';
        } else {
            $reasons[] = '–û—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –ø–æ—á—Ç–∏ –≤ –∫–æ–Ω—Ü–µ';
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        $queue_timeout = self::get_queue_timeout();
        if ($timeout_duration > $queue_timeout) { // –ë–æ–ª–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞
            $reasons[] = '–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å WP Cron)';
        } elseif ($timeout_duration > 10 * 60) { // –ë–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç
            $reasons[] = '–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å API)';
        } else {
            $reasons[] = '–ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å—á–µ—Ç–æ–≤
        $failed_ratio = isset($status['failed'], $status['completed']) && $status['completed'] > 0
            ? ($status['failed'] / $status['completed']) * 100
            : 0;
            
        if ($failed_ratio > 50) {
            $reasons[] = '–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫';
        } elseif ($failed_ratio > 20) {
            $reasons[] = '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (isset($status['is_auto_update']) && $status['is_auto_update']) {
            $reasons[] = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ';
        } else {
            $reasons[] = '–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ';
        }
        
        return implode(', ', $reasons);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥—è—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤
     * 
     * @return array –ú–∞—Å—Å–∏–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥—è—Ö
     */
    public static function get_all_active_queues()
    {
        global $wpdb;
        
        $all_queues = [];
        $total_running = 0;
        $processed_queues = []; // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ—á–µ—Ä–µ–¥—è–º–∏
        // –ò—â–µ–º –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–∞—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π, —Ç–∞–∫ –∏ –Ω–∞–ø—Ä—è–º—É—é –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö
        $active_queue_lists = $wpdb->get_results(
            "SELECT option_name, option_value FROM $wpdb->options 
             WHERE option_name LIKE 'contest_active_queues_%' 
             OR option_name LIKE 'contest_accounts_update_status_%'"
        );
        
        if (empty($active_queue_lists)) {
            return [
                'queues' => [],
                'total_running' => 0,
                'contests' => []
            ];
        }
        
        foreach ($active_queue_lists as $option) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø—Ü–∏–∏
            if (strpos($option->option_name, 'contest_active_queues_') === 0) {
                // –≠—Ç–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
                $contest_prefix = str_replace('contest_active_queues_', '', $option->option_name);
                $contest_id = $contest_prefix === 'global' ? null : intval($contest_prefix);
                $active_queues = maybe_unserialize($option->option_value);
            } elseif (strpos($option->option_name, 'contest_accounts_update_status_') === 0) {
                // –≠—Ç–æ –ø—Ä—è–º–æ–π —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
                $queue_status = maybe_unserialize($option->option_value);
                if (!is_array($queue_status) || !isset($queue_status['queue_id'])) {
                    continue;
                }
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º contest_id –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏
                $contest_id = isset($queue_status['contest_id']) ? intval($queue_status['contest_id']) : null;
                $queue_id = $queue_status['queue_id'];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –æ—á–µ—Ä–µ–¥–∏
                $queue_key = $contest_id . '_' . $queue_id;
                if (isset($processed_queues[$queue_key])) {
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
                }
                $processed_queues[$queue_key] = true;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                $timeout = self::get_queue_timeout(); // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                if (isset($queue_status['is_running']) && $queue_status['is_running'] && 
                    isset($queue_status['last_update']) && (time() - $queue_status['last_update']) > $timeout) {
                    $queue_status['is_running'] = false;
                    $timeout_duration = time() - $queue_status['last_update'];
                    $queue_status['message'] = sprintf('–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ —Ç–∞–π–º-–∞—É—Ç–∞ (%d –º–∏–Ω)', round($timeout_duration / 60));
                    $queue_status['timeout'] = true;
                    $queue_status['timeout_reason'] = self::determine_timeout_reason($queue_status, $timeout_duration);
                    update_option($option->option_name, $queue_status);
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–∞—Ö –≤ –æ—á–µ—Ä–µ–¥–∏
                if (isset($queue_status['accounts']) && is_array($queue_status['accounts'])) {
                    $accounts_details = [];
                    foreach ($queue_status['accounts'] as $account_id => $account_status) {
                        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ –∏–∑ –ë–î
                        $account_info = $wpdb->get_row($wpdb->prepare(
                            "SELECT account_number, name, broker, platform 
                             FROM {$wpdb->prefix}contest_members 
                             WHERE id = %d",
                            $account_id
                        ), ARRAY_A);
                        
                        if ($account_info) {
                            $accounts_details[$account_id] = array_merge($account_status, [
                                'account_number' => $account_info['account_number'],
                                'trader_name' => $account_info['name'],
                                'broker_name' => $account_info['broker'] ?: '–ù–µ —É–∫–∞–∑–∞–Ω',
                                'platform_name' => $account_info['platform'] ?: '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                            ]);
                        } else {
                            // –ï—Å–ª–∏ —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î
                            $accounts_details[$account_id] = array_merge($account_status, [
                                'account_number' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—á–µ—Ç #' . $account_id,
                                'trader_name' => '',
                                'broker_name' => '',
                                'platform_name' => ''
                            ]);
                        }
                    }
                    $queue_status['accounts_details'] = $accounts_details;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞
                $contest_title = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å';
                if ($contest_id) {
                    $contest_post = get_post($contest_id);
                    if ($contest_post) {
                        $contest_title = $contest_post->post_title;
                    }
                } else {
                    $contest_title = '–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏';
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                $all_queues[] = [
                    'contest_id' => $contest_id,
                    'contest_title' => $contest_title,
                    'queues' => [$queue_status],
                    'running_queues' => (isset($queue_status['is_running']) && $queue_status['is_running']) ? 1 : 0,
                    'total_queues' => 1
                ];
                
                if (isset($queue_status['is_running']) && $queue_status['is_running']) {
                    $total_running++;
                }
                
                continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø—Ü–∏–∏
            } else {
                continue;
            }
            
            if (!empty($active_queues) && is_array($active_queues)) {
                $contest_info = [];
                $contest_running_queues = 0;
                
                foreach ($active_queues as $queue_id => $queue_info) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –æ—á–µ—Ä–µ–¥–∏
                    $queue_key = $contest_id . '_' . $queue_id;
                    if (isset($processed_queues[$queue_key])) {
                        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
                    }
                    $processed_queues[$queue_key] = true;
                    
                    if (isset($queue_info['status_option'])) {
                        $status_option = $queue_info['status_option'];
                        $queue_status = get_option($status_option, []);
                        
                        if (!empty($queue_status)) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                            $timeout = self::get_queue_timeout(); // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                            if ($queue_status['is_running'] && (time() - $queue_status['last_update']) > $timeout) {
                                $queue_status['is_running'] = false;
                                $timeout_duration = time() - $queue_status['last_update'];
                                $queue_status['message'] = sprintf('–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ —Ç–∞–π–º-–∞—É—Ç–∞ (%d –º–∏–Ω)', round($timeout_duration / 60));
                                $queue_status['timeout'] = true;
                                $queue_status['timeout_reason'] = self::determine_timeout_reason($queue_status, $timeout_duration);
                                update_option($status_option, $queue_status);
                            }
                            
                            $queue_status['queue_id'] = $queue_id;
                            $queue_status['contest_id'] = $contest_id;
                            $queue_status['start_time_from_list'] = $queue_info['start_time'];
                            
                            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–∞—Ö –≤ –æ—á–µ—Ä–µ–¥–∏
                            if (isset($queue_status['accounts']) && is_array($queue_status['accounts'])) {
                                $accounts_details = [];
                                foreach ($queue_status['accounts'] as $account_id => $account_status) {
                                    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ –∏–∑ –ë–î
                                    $account_info = $wpdb->get_row($wpdb->prepare(
                                        "SELECT account_number, name, broker, platform 
                                         FROM {$wpdb->prefix}contest_members 
                                         WHERE id = %d",
                                        $account_id
                                    ), ARRAY_A);
                                    
                                    if ($account_info) {
                                        $accounts_details[$account_id] = array_merge($account_status, [
                                            'account_number' => $account_info['account_number'],
                                            'trader_name' => $account_info['name'],
                                            'broker_name' => $account_info['broker'] ?: '–ù–µ —É–∫–∞–∑–∞–Ω',
                                            'platform_name' => $account_info['platform'] ?: '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                                        ]);
                                    } else {
                                        // –ï—Å–ª–∏ —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î
                                        $accounts_details[$account_id] = array_merge($account_status, [
                                            'account_number' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—á–µ—Ç #' . $account_id,
                                            'trader_name' => '',
                                            'broker_name' => '',
                                            'platform_name' => ''
                                        ]);
                                    }
                                }
                                $queue_status['accounts_details'] = $accounts_details;
                            }
                            
                            $contest_info[] = $queue_status;
                            
                            if ($queue_status['is_running']) {
                                $contest_running_queues++;
                                $total_running++;
                            }
                        }
                    }
                }
                
                if (!empty($contest_info)) {
                    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞
                    $contest_title = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å';
                    if ($contest_id) {
                        $contest_post = get_post($contest_id);
                        if ($contest_post) {
                            $contest_title = $contest_post->post_title;
                        }
                    } else {
                        $contest_title = '–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏';
                    }
                    
                    $all_queues[] = [
                        'contest_id' => $contest_id,
                        'contest_title' => $contest_title,
                        'queues' => $contest_info,
                        'running_queues' => $contest_running_queues,
                        'total_queues' => count($contest_info)
                    ];
                }
            }
        }
        
        return [
            'queues' => $all_queues,
            'total_running' => $total_running,
            'contests' => count($all_queues)
        ];
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤
     */
    public static function run_auto_update()
    {
        global $wpdb;

        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        $last_run = get_option(self::AUTO_UPDATE_LAST_RUN, 0);
        $now = time();

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        $settings = get_option('fttrader_auto_update_settings', []);
        $interval = isset($settings['fttrader_auto_update_interval']) ?
            intval($settings['fttrader_auto_update_interval']) : 60; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 –º–∏–Ω—É—Ç
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ (—Å–µ–∫—É–Ω–¥—ã)
        $disq_minutes = isset($settings['fttrader_disq_accounts_interval']) ? intval($settings['fttrader_disq_accounts_interval']) : 1440;
        $disq_interval_sec = $disq_minutes * 60;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        if (!isset($GLOBALS['force_auto_update_flag']) && ($now - $last_run) < ($interval * 60)) {
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        update_option(self::AUTO_UPDATE_LAST_RUN, $now);

        // –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—á–µ—Ç–∞ –ø–æ –∫–æ–Ω–∫—É—Ä—Å–∞–º
        $table_name = $wpdb->prefix . 'contest_members';
        
        // –ü–æ–ª—É—á–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ (—Å–æ —Å—Ç–∞—Ç—É—Å–æ–º publish)
        $contest_posts = $wpdb->get_results(
            "SELECT ID FROM $wpdb->posts 
             WHERE post_type = 'trader_contests' 
             AND post_status = 'publish'"
        );

        if (empty($contest_posts)) {
            return;
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        $active_contests = [];
        foreach ($contest_posts as $contest_post) {
            $contest_data = get_post_meta($contest_post->ID, '_fttradingapi_contest_data', true);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫–æ–Ω–∫—É—Ä—Å
            if (!empty($contest_data) && is_array($contest_data) && 
                isset($contest_data['contest_status']) && $contest_data['contest_status'] === 'active') {
                $active_contests[] = $contest_post->ID;
            }
        }

        if (empty($active_contests)) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        $is_forced_update = isset($GLOBALS['force_auto_update_flag']) && $GLOBALS['force_auto_update_flag'] === true;

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        foreach ($active_contests as $contest_id) {
            // –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–õ–õ–ò–ó–ò–ò: –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            $existing_status = self::get_status($contest_id);
            if ($existing_status['is_running']) {
                error_log("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ {$contest_id}: –µ—Å—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å");
                continue;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—á–µ—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
            $contest_accounts = $wpdb->get_col($wpdb->prepare(
                "SELECT id FROM $table_name WHERE contest_id = %d AND connection_status != 'disqualified'",
                $contest_id
            ));

            // –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –±–æ–ª–µ–µ —Å—É—Ç–æ–∫
            $stale_disqualified = $wpdb->get_col($wpdb->prepare(
                "SELECT id FROM $table_name WHERE contest_id = %d AND connection_status = 'disqualified' AND (last_update_time IS NULL OR last_update_time < %d)",
                $contest_id,
                $now - $disq_interval_sec
            ));

            $all_accounts = array_merge($contest_accounts, $stale_disqualified);

            if (!empty($all_accounts)) {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —è–≤–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ñ–ª–∞–≥–æ–º is_auto_update
                error_log("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–Ω–∞ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ {$contest_id} —Å " . count($all_accounts) . " —Å—á–µ—Ç–∞–º–∏");
                self::init_queue($all_accounts, true, $contest_id);
            }
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if ($is_forced_update) {
            unset($GLOBALS['force_auto_update_flag']);
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å—à–∏–µ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * 
     * @return array –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–∏—â–µ–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥—è—Ö
     */
    public static function clear_all_queues()
    {
        global $wpdb;
        
        $result = [
            'success' => true,
            'cleared_queues' => [],
            'cleared_status_options' => [],
            'cleared_queue_options' => [],
            'cleared_lists' => [],
            'message' => '–í—Å–µ –∑–∞–≤–∏—Å—à–∏–µ –æ—á–µ—Ä–µ–¥–∏ –æ—á–∏—â–µ–Ω—ã'
        ];
        
        // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å contest_active_queues_
        $active_queue_lists = $wpdb->get_results(
            "SELECT option_name, option_value FROM $wpdb->options 
             WHERE option_name LIKE 'contest_active_queues_%'"
        );
        
        if (!empty($active_queue_lists)) {
            foreach ($active_queue_lists as $option) {
                $active_queues = maybe_unserialize($option->option_value);
                
                if (!empty($active_queues) && is_array($active_queues)) {
                    // –î–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
                    foreach ($active_queues as $queue_id => $queue_info) {
                        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ–ø—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ—á–µ—Ä–µ–¥–∏
                        if (isset($queue_info['status_option'])) {
                            $status_option = $queue_info['status_option'];
                            delete_option($status_option);
                            $result['cleared_status_options'][] = $status_option;
                            
                            // –í—ã—á–∏—Å–ª—è–µ–º –∏–º—è –æ–ø—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –æ–ø—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                            // –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–º–µ–Ω–∞ STATUS –Ω–∞ QUEUE –≤ –∏–º–µ–Ω–∏ –æ–ø—Ü–∏–∏
                            $queue_option = str_replace(
                                self::STATUS_OPTION_PREFIX, 
                                self::QUEUE_OPTION_PREFIX, 
                                $status_option
                            );
                            delete_option($queue_option);
                            $result['cleared_queue_options'][] = $queue_option;
                            
                            $result['cleared_queues'][] = [
                                'queue_id' => $queue_id,
                                'status_option' => $status_option,
                                'queue_option' => $queue_option
                            ];
                        }
                    }
                    
                    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
                    delete_option($option->option_name);
                    $result['cleared_lists'][] = $option->option_name;
                }
            }
        } else {
            $result['message'] = '–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
        }
        
        // 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ/–ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –æ—á–µ—Ä–µ–¥–µ–π
        $status_options = $wpdb->get_col(
            "SELECT option_name FROM $wpdb->options 
             WHERE option_name LIKE '". self::STATUS_OPTION_PREFIX ."%'"
        );
        
        foreach ($status_options as $status_option) {
            if (!in_array($status_option, $result['cleared_status_options'])) {
                delete_option($status_option);
                $result['cleared_status_options'][] = $status_option;
                
                // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø—Ü–∏—é –æ—á–µ—Ä–µ–¥–∏
                $queue_option = str_replace(
                    self::STATUS_OPTION_PREFIX, 
                    self::QUEUE_OPTION_PREFIX, 
                    $status_option
                );
                delete_option($queue_option);
                $result['cleared_queue_options'][] = $queue_option;
            }
        }
        
        return $result;
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤
     * 
     * @return bool –£—Å–ø–µ—à–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
     */
    public static function setup_auto_update_schedule()
    {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        $settings = get_option('fttrader_auto_update_settings', []);
        $enabled = isset($settings['fttrader_auto_update_enabled']) ? $settings['fttrader_auto_update_enabled'] : false;
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        $timestamp = wp_next_scheduled('contest_create_queues');
        if ($timestamp) {
            wp_unschedule_event($timestamp, 'contest_create_queues');
        }
        
        // –ï—Å–ª–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
        if (!$enabled) {
            return false;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        $interval = isset($settings['fttrader_auto_update_interval']) ? 
            intval($settings['fttrader_auto_update_interval']) : 60; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 –º–∏–Ω—É—Ç
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (!wp_get_schedule('contest_create_queues')) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π
            $schedule = 'hourly'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            if ($interval == 60) {
                $schedule = 'hourly';
            } elseif ($interval == 1440) {
                $schedule = 'daily';
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                if (!wp_get_schedules()['contest_auto_update']) {
                    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    add_filter('cron_schedules', function($schedules) use ($interval) {
                        $schedules['contest_auto_update'] = [
                            'interval' => $interval * 60,
                            'display' => sprintf('–ö–∞–∂–¥—ã–µ %d –º–∏–Ω—É—Ç', $interval)
                        ];
                        return $schedules;
                    });
                }
                $schedule = 'contest_auto_update';
            }
            
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            $last_run = get_option(self::AUTO_UPDATE_LAST_RUN, 0);
            
            if ($last_run > 0) {
                // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ + –∏–Ω—Ç–µ—Ä–≤–∞–ª
                $first_run = $last_run + ($interval * 60);
                // –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –≤ –ø—Ä–æ—à–ª–æ–º, –ø–ª–∞–Ω–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                if ($first_run <= time()) {
                    $first_run = time() + ($interval * 60);
                }
            } else {
                // –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–æ—Å—å, –ø–ª–∞–Ω–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                $first_run = time() + ($interval * 60);
            }
            
            $scheduled = wp_schedule_event($first_run, $schedule, 'contest_create_queues');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º WP Cron
            spawn_cron();
            
            return $scheduled !== false;
        }
        
        return true;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
     * 
     * @return int –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     */
    private static function get_parallel_processing_delay()
    {
        $all_queues = self::get_all_active_queues();
        $total_running = $all_queues['total_running'];
        
        if ($total_running <= 1) {
            return 0; // –ù–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
        }
        
        // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 0 –¥–æ 3 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        return rand(0, min(3, $total_running - 1));
    }
    
    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –≤–æ –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö
     * 
     * @return int –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
     */
    private static function count_all_active_queues()
    {
        $all_queues = self::get_all_active_queues();
        return $all_queues['total_running'];
    }
    
    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ
     * 
     * @param int $active_queues_count –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
     * @param int $base_delay –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     * @return int –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     */
    private static function get_adaptive_delay($active_queues_count, $base_delay)
    {
        if ($active_queues_count <= 1) {
            return $base_delay;
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
        // –ü—Ä–∏ 2 –æ—á–µ—Ä–µ–¥—è—Ö: 5 * 1.5 = 7.5 —Å–µ–∫
        // –ü—Ä–∏ 3 –æ—á–µ—Ä–µ–¥—è—Ö: 5 * 2.0 = 10 —Å–µ–∫  
        // –ü—Ä–∏ 4+ –æ—á–µ—Ä–µ–¥—è—Ö: 5 * 2.5 = 12.5 —Å–µ–∫
        $multiplier = 1 + (($active_queues_count - 1) * 0.5);
        $multiplier = min($multiplier, 2.5); // –ú–∞–∫—Å–∏–º—É–º x2.5
        
        return intval($base_delay * $multiplier);
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ç–∞–π–º–∞—É—Ç–µ
     * 
     * @param array $options –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—á–∏—Å—Ç–∫–∏
     * @return array –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    public static function cleanup_timeout_queues($options = [])
    {
        global $wpdb;
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        $defaults = [
            'older_than_hours' => 24,      // –°—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
            'min_progress' => 0,           // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å (0 = –ª—é–±–æ–π)
            'max_progress' => 100,         // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            'dry_run' => false,            // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–Ω–µ —É–¥–∞–ª—è—Ç—å)
            'include_completed' => false   // –í–∫–ª—é—á–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
        ];
        
        $options = array_merge($defaults, $options);
        
        $result = [
            'success' => true,
            'analyzed_queues' => 0,
            'eligible_for_cleanup' => [],
            'cleaned_queues' => [],
            'preserved_queues' => [],
            'errors' => [],
            'summary' => '',
            'dry_run' => $options['dry_run']
        ];
        
        error_log("=== –ù–ê–ß–ê–õ–û –û–ß–ò–°–¢–ö–ò –¢–ê–ô–ú–ê–£–¢–û–í ===");
        error_log("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: " . json_encode($options));
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
            $all_queues = self::get_all_active_queues();
            $result['analyzed_queues'] = count($all_queues['queues']);
            
            if (empty($all_queues['queues'])) {
                $result['summary'] = '–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ';
                return $result;
            }
            
            $cutoff_time = time() - ($options['older_than_hours'] * 3600);
            
            foreach ($all_queues['queues'] as $contest_id => $contest_queues) {
                foreach ($contest_queues as $queue_id => $queue_data) {
                    
                    // –ê–Ω–∞–ª–∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
                    $analysis = self::analyze_queue_for_cleanup($queue_data, $options, $cutoff_time);
                    
                    if ($analysis['eligible']) {
                        $result['eligible_for_cleanup'][] = [
                            'queue_id' => $queue_id,
                            'contest_id' => $contest_id,
                            'reason' => $analysis['reason'],
                            'age_hours' => $analysis['age_hours'],
                            'progress' => $analysis['progress'],
                            'status' => $queue_data['timeout'] ? 'timeout' : ($queue_data['is_running'] ? 'running' : 'stopped')
                        ];
                        
                        if (!$options['dry_run']) {
                            // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
                            $cleanup_result = self::cleanup_single_queue($contest_id, $queue_id, $queue_data);
                            
                            if ($cleanup_result['success']) {
                                $result['cleaned_queues'][] = $cleanup_result;
                                error_log("‚úÖ –û—á–µ—Ä–µ–¥—å {$queue_id} –æ—á–∏—â–µ–Ω–∞: {$analysis['reason']}");
                            } else {
                                $result['errors'][] = "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {$queue_id}: " . $cleanup_result['error'];
                                error_log("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {$queue_id}: " . $cleanup_result['error']);
                            }
                        }
                    } else {
                        $result['preserved_queues'][] = [
                            'queue_id' => $queue_id,
                            'contest_id' => $contest_id,
                            'reason' => $analysis['preserve_reason'],
                            'age_hours' => $analysis['age_hours'],
                            'progress' => $analysis['progress']
                        ];
                    }
                }
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É
            $eligible_count = count($result['eligible_for_cleanup']);
            $cleaned_count = count($result['cleaned_queues']);
            $preserved_count = count($result['preserved_queues']);
            $errors_count = count($result['errors']);
            
            if ($options['dry_run']) {
                $result['summary'] = sprintf(
                    '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –Ω–∞–π–¥–µ–Ω–æ %d –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏, %d –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
                    $eligible_count,
                    $preserved_count
                );
            } else {
                $result['summary'] = sprintf(
                    '–û—á–∏—â–µ–Ω–æ: %d, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %d, –æ—à–∏–±–æ–∫: %d',
                    $cleaned_count,
                    $preserved_count,
                    $errors_count
                );
            }
            
            error_log("–ò–¢–û–ì–ò –û–ß–ò–°–¢–ö–ò: " . $result['summary']);
            
        } catch (Exception $e) {
            $result['success'] = false;
            $result['errors'][] = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ' . $e->getMessage();
            error_log("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –û–ß–ò–°–¢–ö–ò: " . $e->getMessage());
        }
        
        error_log("=== –ö–û–ù–ï–¶ –û–ß–ò–°–¢–ö–ò –¢–ê–ô–ú–ê–£–¢–û–í ===");
        return $result;
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ–± –æ—á–∏—Å—Ç–∫–µ
     * 
     * @param array $queue_data –î–∞–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
     * @param array $options –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—á–∏—Å—Ç–∫–∏
     * @param int $cutoff_time –í—Ä–µ–º—è –æ—Ç—Å–µ—á–∫–∏
     * @return array –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
     */
    private static function analyze_queue_for_cleanup($queue_data, $options, $cutoff_time)
    {
        $analysis = [
            'eligible' => false,
            'reason' => '',
            'preserve_reason' => '',
            'age_hours' => 0,
            'progress' => 0
        ];
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –æ—á–µ—Ä–µ–¥–∏
        $start_time = isset($queue_data['start_time_from_list']) ? $queue_data['start_time_from_list'] : 0;
        $last_update = isset($queue_data['last_update']) ? $queue_data['last_update'] : 0;
        $age_seconds = time() - max($start_time, $last_update);
        $analysis['age_hours'] = round($age_seconds / 3600, 1);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (isset($queue_data['total']) && $queue_data['total'] > 0) {
            $analysis['progress'] = round(($queue_data['completed'] / $queue_data['total']) * 100, 1);
        }
        
        // –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ù–ï —É–¥–∞–ª—è—Ç—å –µ—Å–ª–∏)
        if ($queue_data['is_running']) {
            $analysis['preserve_reason'] = '–û—á–µ—Ä–µ–¥—å –∞–∫—Ç–∏–≤–Ω–∞';
            return $analysis;
        }
        
        if ($age_seconds < ($options['older_than_hours'] * 3600)) {
            $analysis['preserve_reason'] = sprintf('–°–ª–∏—à–∫–æ–º –Ω–æ–≤–∞—è (%.1f —á)', $analysis['age_hours']);
            return $analysis;
        }
        
        if ($analysis['progress'] < $options['min_progress'] || $analysis['progress'] > $options['max_progress']) {
            $analysis['preserve_reason'] = sprintf('–ü—Ä–æ–≥—Ä–µ—Å—Å %.1f%% –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞', $analysis['progress']);
            return $analysis;
        }
        
        if (!$options['include_completed'] && $analysis['progress'] >= 99) {
            $analysis['preserve_reason'] = '–ü–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
            return $analysis;
        }
        
        // –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
        $analysis['eligible'] = true;
        
        if (isset($queue_data['timeout']) && $queue_data['timeout']) {
            $analysis['reason'] = sprintf('–¢–∞–π–º–∞—É—Ç %.1f —á –Ω–∞–∑–∞–¥ (%.1f%%)', $analysis['age_hours'], $analysis['progress']);
        } elseif ($analysis['progress'] == 0) {
            $analysis['reason'] = sprintf('–ù–µ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å %.1f —á', $analysis['age_hours']);
        } elseif ($analysis['progress'] < 10) {
            $analysis['reason'] = sprintf('–ó–∞—Å—Ç—Ä—è–ª–∞ –≤ –Ω–∞—á–∞–ª–µ %.1f —á (%.1f%%)', $analysis['age_hours'], $analysis['progress']);
        } else {
            $analysis['reason'] = sprintf('–°—Ç–∞—Ä–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è %.1f —á (%.1f%%)', $analysis['age_hours'], $analysis['progress']);
        }
        
        return $analysis;
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –æ–¥–Ω—É –æ—á–µ—Ä–µ–¥—å –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     * 
     * @param int|null $contest_id ID –∫–æ–Ω–∫—É—Ä—Å–∞
     * @param string $queue_id ID –æ—á–µ—Ä–µ–¥–∏
     * @param array $queue_data –î–∞–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏
     * @return array –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏
     */
    private static function cleanup_single_queue($contest_id, $queue_id, $queue_data)
    {
        try {
            $contest_prefix = $contest_id ? $contest_id : 'global';
            $status_option = 'contest_accounts_update_status_' . $contest_prefix . '_' . $queue_id;
            $queue_option = 'contest_accounts_update_queue_' . $contest_prefix . '_' . $queue_id;
            
            // –£–¥–∞–ª—è–µ–º –æ–ø—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏
            $status_deleted = delete_option($status_option);
            $queue_deleted = delete_option($queue_option);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
            $contest_key = 'contest_active_queues_' . ($contest_id ? $contest_id : 'global');
            $active_queues = get_option($contest_key, []);
            
            $removed_from_list = false;
            if (isset($active_queues[$queue_id])) {
                unset($active_queues[$queue_id]);
                update_option($contest_key, $active_queues);
                $removed_from_list = true;
            }
            
            return [
                'success' => true,
                'queue_id' => $queue_id,
                'contest_id' => $contest_id,
                'status_deleted' => $status_deleted,
                'queue_deleted' => $queue_deleted,
                'removed_from_list' => $removed_from_list,
                'accounts_count' => isset($queue_data['total']) ? $queue_data['total'] : 0
            ];
            
        } catch (Exception $e) {
            return [
                'success' => false,
                'queue_id' => $queue_id,
                'contest_id' => $contest_id,
                'error' => $e->getMessage()
            ];
        }
    }

    /**
     * –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ —Å—á–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º curl_multi
     * 
     * @param array $account_batch –ú–∞—Å—Å–∏–≤ ID —Å—á–µ—Ç–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
     * @param string $queue_batch_id ID –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @return array –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞
     */
    private static function process_accounts_parallel($account_batch, $queue_batch_id = null)
    {
        global $wpdb;
        
        if (empty($account_batch)) {
            return [];
        }
        
        error_log("–ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É " . count($account_batch) . " —Å—á–µ—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ");
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ
        $account_requests = [];
        $curl_handles = [];
        $multi_handle = curl_multi_init();
        
        foreach ($account_batch as $account_id) {
            $account = $wpdb->get_row($wpdb->prepare(
                "SELECT * FROM {$wpdb->prefix}contest_members WHERE id = %d",
                $account_id
            ));
            
            if (!$account) {
                error_log("–û–®–ò–ë–ö–ê: –°—á–µ—Ç ID {$account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î");
                continue;
            }
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ –≤ process_trading_account
            require_once plugin_dir_path(__FILE__) . 'class-api-config.php';
            $api_url = FT_API_Config::get_api_url();
            
            $params = [
                'action' => 'get_data',
                'account_number' => $account->account_number,
                'password' => $account->password,
                'server' => $account->server,
                'terminal' => $account->terminal,
                'last_history_time' => $account->last_history_time
            ];
            
            if ($queue_batch_id) {
                $params['queue_batch_id'] = $queue_batch_id;
            }
            
            $url = $api_url . '?' . http_build_query($params);
            
            // –°–æ–∑–¥–∞–µ–º curl handle –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞
            $ch = curl_init();
            curl_setopt_array($ch, [
                CURLOPT_URL => $url,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_TIMEOUT => 35, // –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —á–µ–º –æ–±—ã—á–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                CURLOPT_CONNECTTIMEOUT => 10,
                CURLOPT_SSL_VERIFYPEER => false,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_USERAGENT => 'WordPress/' . get_bloginfo('version') . '; ' . home_url()
            ]);
            
            curl_multi_add_handle($multi_handle, $ch);
            
            $curl_handles[$account_id] = $ch;
            $account_requests[$account_id] = [
                'account' => $account,
                'url' => $url,
                'start_time' => microtime(true)
            ];
        }
        
                 // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
         $running = null;
         $completed_requests = [];
         
         do {
             curl_multi_exec($multi_handle, $running);
             
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
             while (($info = curl_multi_info_read($multi_handle)) !== false) {
                 if ($info['result'] === CURLE_OK) {
                     // –ù–∞—Ö–æ–¥–∏–º account_id –¥–ª—è —ç—Ç–æ–≥–æ handle
                     foreach ($curl_handles as $account_id => $handle) {
                         if ($handle === $info['handle']) {
                             $completed_requests[$account_id] = microtime(true);
                             break;
                         }
                     }
                 }
             }
             
             curl_multi_select($multi_handle);
         } while ($running > 0);
         
         // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
         $results = [];
         foreach ($account_requests as $account_id => $request_data) {
             $ch = $curl_handles[$account_id];
             $response_body = curl_multi_getcontent($ch);
             $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
             $total_time = curl_getinfo($ch, CURLINFO_TOTAL_TIME);
             
             // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
             $request_end_time = isset($completed_requests[$account_id]) ? 
                               $completed_requests[$account_id] : microtime(true);
             $duration_ms = round(($request_end_time - $request_data['start_time']) * 1000, 2);
            
                         // –õ–æ–≥–∏—Ä—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ process_trading_account)
             $http_log_path = plugin_dir_path(__FILE__) . 'logs/http_requests.log';
             $request_id = 'req_' . uniqid();
             
             // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –≤ —á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è
             $start_time_readable = date('Y-m-d H:i:s', (int)$request_data['start_time']) . 
                                   '.' . str_pad((int)(($request_data['start_time'] - (int)$request_data['start_time']) * 1000), 3, '0', STR_PAD_LEFT);
             $end_time_readable = date('Y-m-d H:i:s', $request_end_time) . 
                                '.' . str_pad((int)(($request_end_time - (int)$request_end_time) * 1000), 3, '0', STR_PAD_LEFT);
             
             $log_entry = "============================================================\n";
             $log_entry .= "üåê HTTP REQUEST START (PARALLEL)\n";
             $log_entry .= "   ID: " . $request_id . "\n";
             $log_entry .= "   START_TIME: " . $start_time_readable . "\n";
             $log_entry .= "   ACCOUNT: " . $request_data['account']->account_number . "\n";
             $log_entry .= "   SERVER: " . $request_data['account']->server . "\n";
             $log_entry .= "   URL: " . $request_data['url'] . "\n";
             $log_entry .= "   QUEUE: " . ($queue_batch_id ?: 'unknown') . "\n";
             $log_entry .= "   ------------------------------------------------------------\n";
             $log_entry .= "‚úÖ HTTP REQUEST END (PARALLEL)\n";
             $log_entry .= "   ID: " . $request_id . "\n";
             $log_entry .= "   END_TIME: " . $end_time_readable . "\n";
             $log_entry .= "   DURATION: " . $duration_ms . "ms\n";
             $log_entry .= "   HTTP_CODE: " . $http_code . "\n";
             $log_entry .= "   RESPONSE_SIZE: " . strlen($response_body) . " bytes\n";
             $log_entry .= "============================================================\n";
            
            file_put_contents($http_log_path, $log_entry, FILE_APPEND | LOCK_EX);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ process_trading_account)
            $account_result = self::process_api_response(
                $account_id, 
                $request_data['account'], 
                $response_body, 
                $http_code
            );
            
            $results[$account_id] = $account_result;
            
            error_log("–ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –°—á–µ—Ç {$account_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {$duration_ms}ms, HTTP {$http_code}");
            
            // –û—á–∏—â–∞–µ–º curl handle
            curl_multi_remove_handle($multi_handle, $ch);
            curl_close($ch);
        }
        
        curl_multi_close($multi_handle);
        
        error_log("–ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ " . count($results) . " —Å—á–µ—Ç–æ–≤");
        
        return $results;
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ API —Å–µ—Ä–≤–µ—Ä–∞ (–≤—ã–¥–µ–ª–µ–Ω–æ –∏–∑ process_trading_account)
     * 
     * @param int $account_id ID —Å—á–µ—Ç–∞
     * @param object $account –î–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –∏–∑ –ë–î
     * @param string $response_body –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ HTTP
     * @param int $http_code HTTP –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
     * @return array –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    private static function process_api_response($account_id, $account, $response_body, $http_code)
    {
        global $wpdb;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –∫–æ–¥
        if ($http_code !== 200) {
            if ($http_code == 500) {
                return [
                    'success' => false,
                    'message' => '–°–µ—Ä–≤–µ—Ä API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.'
                ];
            } elseif ($http_code >= 400 && $http_code < 500) {
                return [
                    'success' => false,
                    'message' => "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API (–∫–æ–¥ {$http_code}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞."
                ];
            } else {
                return [
                    'success' => false,
                    'message' => "–û—à–∏–±–∫–∞ HTTP {$http_code}"
                ];
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        if (empty($response_body)) {
            return [
                'success' => false,
                'message' => '–°–µ—Ä–≤–µ—Ä API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç'
            ];
        }
        
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
        $data = json_decode($response_body, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            return [
                'success' => false,
                'message' => '–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ API: ' . json_last_error_msg()
            ];
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞
        if (!isset($data['acc'])) {
            return [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞'
            ];
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (isset($data['acc']['connection_status']) && $data['acc']['connection_status'] === 'disconnected') {
            $error_message = isset($data['acc']['error_description']) && !empty($data['acc']['error_description']) 
                ? $data['acc']['error_description'] 
                : '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—á—ë—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ —Å–µ—Ä–≤–µ—Ä.';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            $wpdb->update(
                $wpdb->prefix . 'contest_members',
                [
                    'connection_status' => 'disconnected',
                    'error_description' => $error_message,
                    'last_update' => current_time('mysql')
                ],
                ['id' => $account_id]
            );
            
            return [
                'success' => false,
                'message' => $error_message
            ];
        }
        
        // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π API -> –ë–î (–∏–∑ process_trading_account)
        $fields_map = [
            'balance' => ['acc', 'i_bal'],
            'equity' => ['acc', 'i_equi'], 
            'margin' => ['acc', 'i_marg'],
            'profit' => ['acc', 'i_prof'],
            'leverage' => ['acc', 'i_level'], // –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º i_level
            'currency' => ['acc', 'i_curr'],
            'orders_total' => ['acc', 'i_ordtotal'],
            'orders_history_total' => ['statistics', 'ACCOUNT_ORDERS_HISTORY_TOTAL'],
            'orders_history_profit' => ['statistics', 'ACCOUNT_ORDERS_HISTORY_PROFIT']
        ];
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î
        $db_data = [
            'connection_status' => 'connected',
            'error_description' => '',
            'last_update' => current_time('mysql')
        ];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        $old_data = [
            'balance' => $account->balance,
            'equity' => $account->equity,
            'margin' => $account->margin,
            'profit' => $account->profit,
            'leverage' => $account->leverage,
            'orders_total' => $account->orders_total,
            'orders_history_total' => $account->orders_history_total,
            'password' => $account->password
        ];
        
        $new_data_for_history = ['connection_status' => 'connected'];
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—è
        foreach ($fields_map as $db_key => $path) {
            $section = $path[0];
            $key = $path[1];
            
            if (isset($data[$section][$key]) && $data[$section][$key] !== '' && $data[$section][$key] !== null) {
                $value = floatval($data[$section][$key]);
                $db_data[$db_key] = $value;
                $new_data_for_history[$db_key] = $value;
            }
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏
        if (isset($db_data['balance']) && $db_data['balance'] > 0 && isset($db_data['profit'])) {
            $db_data['profit_percent'] = round(($db_data['profit'] / $db_data['balance']) * 100, 2);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        $result = $wpdb->update(
            $wpdb->prefix . 'contest_members',
            $db_data,
            ['id' => $account_id]
        );
        
        if ($result === false) {
            return [
                'success' => false,
                'message' => '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' . $wpdb->last_error
            ];
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        require_once 'class-account-history.php';
        $history = new Account_History();
        $history->track_changes($account_id, $old_data, $new_data_for_history);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ä–¥–µ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (isset($data['open_orders']) && is_array($data['open_orders'])) {
            require_once 'class-orders.php';
            $orders = new Account_Orders();
            try {
                $orders->update_orders($account_id, $data['open_orders']);
            } catch (Exception $e) {
                error_log('Error updating orders for account ' . $account_id . ': ' . $e->getMessage());
            }
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
        if (isset($data['order_history']) && is_array($data['order_history'])) {
            require_once 'class-orders.php';
            $orders = new Account_Orders();
            $orders->update_order_history($account_id, $data['order_history']);
        }
        
        return [
            'success' => true,
            'message' => '–î–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
        ];
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ä—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
// –ß–∏—Å–ª–æ 10 - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, 2 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (contest_id, queue_id)
add_action('process_accounts_update_batch', ['Account_Updater', 'process_batch'], 10, 2);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
add_action('contest_create_queues', ['Account_Updater', 'run_auto_update']);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—É–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
add_action('update_option_fttrader_auto_update_settings', function($old_value, $new_value) {
    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    Account_Updater::setup_auto_update_schedule();
}, 10, 2);

/**
 * AJAX –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å—à–∏—Ö –æ—á–µ—Ä–µ–¥–µ–π
 */
function fttradingapi_clear_all_queues() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ nonce –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ft_trader_nonce')) {
        wp_send_json_error(['message' => '–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.']);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!current_user_can('manage_options')) {
        wp_send_json_error(['message' => '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.']);
        return;
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π
    $result = Account_Updater::clear_all_queues();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    $message = '–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ';
    $message .= '–û—á–∏—â–µ–Ω–æ –æ—á–µ—Ä–µ–¥–µ–π: ' . count($result['cleared_queues']) . ', ';
    $message .= '—Å–ø–∏—Å–∫–æ–≤ –æ—á–µ—Ä–µ–¥–µ–π: ' . count($result['cleared_lists']) . ', ';
    $message .= '–æ–ø—Ü–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤: ' . count($result['cleared_status_options']) . ', ';
    $message .= '–æ–ø—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö: ' . count($result['cleared_queue_options']) . '.';
    
    wp_send_json_success([
        'message' => $message,
        'details' => $result
    ]);
}
add_action('wp_ajax_fttradingapi_clear_all_queues', 'fttradingapi_clear_all_queues');

/**
 * AJAX –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
function fttradingapi_restore_auto_update_schedule() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ nonce –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ft_trader_nonce')) {
        wp_send_json_error(['message' => '–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.']);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!current_user_can('manage_options')) {
        wp_send_json_error(['message' => '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.']);
        return;
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    $result = Account_Updater::setup_auto_update_schedule();
    
    if ($result) {
        $next_run = wp_next_scheduled('contest_create_queues');
        $message = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. ';
        $message .= '–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: ' . date('d.m.Y H:i:s', $next_run);
        
        wp_send_json_success([
            'message' => $message,
            'next_run' => $next_run,
            'next_run_formatted' => date('d.m.Y H:i:s', $next_run)
        ]);
    } else {
        wp_send_json_error([
            'message' => '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.'
        ]);
    }
}
add_action('wp_ajax_fttradingapi_restore_auto_update_schedule', 'fttradingapi_restore_auto_update_schedule');
